declare const isMacLike: () => boolean;
declare const controlOrMetaSymbol: () => "⌘" | "ctrl";
declare const controlOrMetaKey: () => "meta" | "control";
declare const optionOrAltSymbol: () => "⌥" | "alt";
declare const isShortcutTaken: (arr1: string[], arr2: string[]) => boolean;
declare type KeyboardEventLike = Pick<KeyboardEvent, 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey' | 'key' | 'code' | 'keyCode' | 'preventDefault'>;
declare const eventToShortcut: (e: KeyboardEventLike) => API_KeyCollection | null;
declare const shortcutMatchesShortcut: (inputShortcut: API_KeyCollection, shortcut: API_KeyCollection) => boolean;
declare const eventMatchesShortcut: (e: KeyboardEventLike, shortcut: API_KeyCollection) => boolean;
declare const keyToSymbol: (key: string) => string;
declare const shortcutToHumanString: (shortcut: API_KeyCollection) => string;

interface SubState {
    shortcuts: API_Shortcuts;
}
interface SubAPI {
    getShortcutKeys(): API_Shortcuts;
    getDefaultShortcuts(): API_Shortcuts | API_AddonShortcutDefaults;
    getAddonsShortcuts(): API_AddonShortcuts;
    getAddonsShortcutLabels(): API_AddonShortcutLabels;
    getAddonsShortcutDefaults(): API_AddonShortcutDefaults;
    setShortcuts(shortcuts: API_Shortcuts): Promise<API_Shortcuts>;
    setShortcut(action: API_Action, value: API_KeyCollection): Promise<API_KeyCollection>;
    setAddonShortcut(addon: string, shortcut: API_AddonShortcut): Promise<API_AddonShortcut>;
    restoreAllDefaultShortcuts(): Promise<API_Shortcuts>;
    restoreDefaultShortcut(action: API_Action): Promise<API_KeyCollection>;
    handleKeydownEvent(event: KeyboardEventLike): void;
    handleShortcutFeature(feature: API_Action): void;
}
declare type API_KeyCollection = string[];
interface API_Shortcuts {
    fullScreen: API_KeyCollection;
    togglePanel: API_KeyCollection;
    panelPosition: API_KeyCollection;
    toggleNav: API_KeyCollection;
    toolbar: API_KeyCollection;
    search: API_KeyCollection;
    focusNav: API_KeyCollection;
    focusIframe: API_KeyCollection;
    focusPanel: API_KeyCollection;
    prevComponent: API_KeyCollection;
    nextComponent: API_KeyCollection;
    prevStory: API_KeyCollection;
    nextStory: API_KeyCollection;
    shortcutsPage: API_KeyCollection;
    aboutPage: API_KeyCollection;
    escape: API_KeyCollection;
    collapseAll: API_KeyCollection;
    expandAll: API_KeyCollection;
}
declare type API_Action = keyof API_Shortcuts;
interface API_AddonShortcut {
    label: string;
    defaultShortcut: API_KeyCollection;
    actionName: string;
    showInMenu?: boolean;
    action: (...args: any[]) => any;
}
declare type API_AddonShortcuts = Record<string, API_AddonShortcut>;
declare type API_AddonShortcutLabels = Record<string, string>;
declare type API_AddonShortcutDefaults = Record<string, API_KeyCollection>;

export { KeyboardEventLike as K, SubState as S, SubAPI as a, controlOrMetaKey as b, controlOrMetaSymbol as c, isShortcutTaken as d, eventToShortcut as e, eventMatchesShortcut as f, shortcutToHumanString as g, isMacLike as i, keyToSymbol as k, optionOrAltSymbol as o, shortcutMatchesShortcut as s };
