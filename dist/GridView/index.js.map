{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///(webpack)/buildin/module.js","webpack:///dist/F:/Projetos Individuais/ReactLibraries/trentim-react-sdk/src/Card/Card.tsx","webpack:///dist/F:/Projetos Individuais/ReactLibraries/trentim-react-sdk/src/GridView/Contexts.ts","webpack:///dist/F:/Projetos Individuais/ReactLibraries/trentim-react-sdk/src/GridView/DateSlider.tsx","webpack:///dist/F:/Projetos Individuais/ReactLibraries/trentim-react-sdk/src/GridView/GridView.tsx","webpack:///dist/F:/Projetos Individuais/ReactLibraries/trentim-react-sdk/src/GridView/GroupPanel.tsx","webpack:///dist/F:/Projetos Individuais/ReactLibraries/trentim-react-sdk/src/GridView/ListOptions.tsx","webpack:///dist/F:/Projetos Individuais/ReactLibraries/trentim-react-sdk/src/GridView/PanelFilter.tsx","webpack:///dist/F:/Projetos Individuais/ReactLibraries/trentim-react-sdk/src/GridView/PeoplePicker.tsx","webpack:///dist/F:/Projetos Individuais/ReactLibraries/trentim-react-sdk/src/GridView/handlers/GridViewFilter.ts","webpack:///dist/F:/Projetos Individuais/ReactLibraries/trentim-react-sdk/src/GridView/handlers/GridViewGrouping.ts","webpack:///dist/F:/Projetos Individuais/ReactLibraries/trentim-react-sdk/src/GridView/handlers/GridViewMapper.ts","webpack:///dist/F:/Projetos Individuais/ReactLibraries/trentim-react-sdk/src/GridView/hooks/useGridCardRendering.tsx","webpack:///dist/F:/Projetos Individuais/ReactLibraries/trentim-react-sdk/src/GridView/hooks/useGridController.tsx","webpack:///dist/F:/Projetos Individuais/ReactLibraries/trentim-react-sdk/src/GridView/hooks/usePanelFilterController.ts","webpack:///dist/F:/Projetos Individuais/ReactLibraries/trentim-react-sdk/src/GridView/index.ts","webpack:///dist/F:/Projetos Individuais/ReactLibraries/trentim-react-sdk/src/helpers/Utils.ts","webpack:///dist/F:/Projetos Individuais/ReactLibraries/trentim-react-sdk/src/helpers/enums.ts","webpack:///external \"@fluentui/react\"","webpack:///external \"@fluentui/react/lib/Button\"","webpack:///external \"@fluentui/react/lib/ChoiceGroup\"","webpack:///external \"@fluentui/react/lib/DatePicker\"","webpack:///external \"@fluentui/react/lib/DetailsList\"","webpack:///external \"@fluentui/react/lib/Dropdown\"","webpack:///external \"@fluentui/react/lib/Panel\"","webpack:///external \"@fluentui/react/lib/Pickers\"","webpack:///external \"@fluentui/react/lib/Slider\"","webpack:///external \"@fluentui/react/lib/Sticky\"","webpack:///external \"react\""],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","webpackPolyfill","deprecate","paths","children","InfoCard","React","memo","props","styles","card","backgroundColor","border","margin","borderRadius","position","display","flexDirection","width","height","userSelect","enableUserSelect","color","overflow","top","borderBottom","gridTemplateColumns","columnGap","padding","fontFamily","col","rightCol","alignItems","leftCol","cardTitle","WebkitLineClamp","WebkitBoxOrient","fontSize","lineHeight","projectCode","opacity","bottom","justifyContent","circleWrap","circle","background","status","marginLeft","linkButton","minWidth","onClick","e","onCardClick","style","cardSubtitle","cardRightColInformation","_a","containerStyle","_b","_c","values","_d","length","_e","map","idx","title","plantName","circleIndicator","_f","__assign","_g","_h","_j","Button_1","onClickDownButton","iconProps","iconName","createContext","enableFilter","enableSearch","enableCardView","customButtons","setIsFilterPanelOpen","undefined","searchBoxPlaceholder","setRenderAs","defaultButtonsOrder","group","search","filter","setIsGroupPanelOpen","isOpen","onApply","availableFilters","onCancel","onClose","panelTitle","actualFilteredValues","Map","setActualFilteredValues","onOpen","fromDate","toDate","Date","setFromDate","setToDate","options","selectedGroupKeys","setSelectedGroupKeys","DateSliderComponent","useState","displayDatePicker","setDisplayDatePicker","useContext","Contexts_1","formatSliderValue","num","onSliderChange","_","val","onRecordDateRange","enums_1","NONE","lastWeek","setDate","getDate","WEEK","lastMonth","setMonth","getMonth","MONTH","lastYear","setFullYear","getFullYear","YEAR","useEffect","CUSTOM","defaultSliderValue","dateStrings","useMemo","months","shortMonths","days","shortDays","goToToday","prevMonthAriaLabel","nextMonthAriaLabel","prevYearAriaLabel","nextYearAriaLabel","closeButtonAriaLabel","isRequiredErrorMessage","invalidInputErrorMessage","isOutOfBoundsErrorMessage","showWeekNumbers","weekNumberFormatString","firstWeekOfYear","dateFormat","showGoToToday","Slider_1","min","max","step","defaultValue","container","valueFormat","onChanged","label","DatePicker_1","maxDate","strings","formatDate","date","toLocaleDateString","onSelectDate","minDate","GridView","useGridController","state","handlers","JSX","CardsList","actualRows","cols","isFilterPanelOpen","filterPanelConfig","groupPanelConfig","listConfig","shouldRenderCard","isGroupPanelOpen","groups","onItemClick","Provider","ListOptions_1","zIndex","onRenderCustomComponent","DetailsList_1","detailsListProps","onRenderItemColumn","onRenderRow","defaultRender","item","cursor","items","columns","groupProps","isAllGroupsCollapsed","collapseAllVisibility","visible","onRenderHeader","showEmptyGroups","layoutMode","fixedColumns","isHeaderVisible","onRenderDetailsHeader","headerProps","Sticky_1","stickyPosition","Header","stickyBackgroundColor","checkboxVisibility","hidden","react_1","fallback","id","cardProps","gap","PanelFilter_1","GroupPanel_1","GroupPanel","Panel","lazy","then","default","PrimaryButton","DefaultButton","RadioButton","ChoiceGroup","FluentPanel","isFooterAtBottom","onDismiss","onRenderFooter","marginRight","onChange","opt","keyWithName","concat","text","defaultSelectedKey","split","__read","ListOptions","searchKeys","onSearchItem","enableGrouping","defaultStyles","order","b","className","newValue","placeholder","icon","PanelFilter","usePanelFilterController","Dropdown","TagPicker","getDefaultDropdownSelectedKeys","onAddOrRemoveToMap","getDefaultSelectedTag","getDefaultSelectedSlider","Suspense","mapOptions","renderAs","defaultSelectedKeys","multiSelect","enableMultiple","getTextFromItem","defaultSelectedItems","pickerSuggestionsProps","suggestionsHeaderText","noResultsFoundText","loadingText","pickerCalloutProps","doNotLayer","onChangeTags","onItemSelected","onTagSelected","onResolveSuggestions","onResolveTagSuggestion","DateSlider_1","onRecordDateChange","PeoplePicker_1","people","getDefaultSelectedPeople","onChangePeople","suggestionProps","mostRecentlyUsedHeaderText","showRemoveButtons","suggestionsAvailableAlertText","suggestionsContainerAriaLabel","PeoplePicker","peopleList","setPeopleList","picker","useRef","onFilterChanged","filterText","currentPersonas","limitResults","filteredPersonas","filterPersonasByText","removeDuplicates","slice","doesTextStartWith","onRemoveSuggestion","indexPeopleList","indexOf","newPeople","Pickers_1","onValidateInput","validateInput","componentRef","resolveDelay","toLowerCase","personas","possibleDupes","persona","listContainsPersona","input","valid","warning","invalid","GridViewFilter","allRows","hiddenFields","filters","columnsToFilter","filterFromColumns","index","renderFilterAs","keys","fieldName","data","stringObject","Utils","getNestedObject","toString","dateConversionOptions","shouldConvertToLocaleString","Utils_1","convertIsoToLocaleString","locales","formatOptions","uniqueOptions","obj","pos","arr","mapObj","push","setActualRows","setIsFilterPanel","selectedItems","size","groupedMaps","GridViewMapper_1","groupMaps","filteredRows","mapKey","filterFrom","forEach","isDate","from","to","ORrowsFromThisKey","rDate","Id","includes","apply","__spreadArray","entries","allMapValues","newFilteredItems","rowValue","some","v","hiddenKeys","searchText","itemValues","k","keys_1_1","containsText","GridViewGrouping","setGroups","setIsGroupPanel","emptyGroupLabel","keyAndName","defaultEmptyLabel","sort","reduce","acc","cur","valueFromKey","isKeyADate","find","startIndex","count","g","lastAcc","GridViewMapper","mapsByKeyKind","keyName","doesNotHaveKey","has","sameMapsList","set","thisKindMap_1","useGridCardRendering","setEnableGrouping","setShouldRenderCard","console","error","Card","row","cardTitleKey","cardSubtitleKey","titleDateConversionOptions","subtitleDateConversionOptions","rightColumn","cIndicator","titleValue","_k","_l","_m","newCardProps","_o","marginBottom","fontWeight","setCols","headerOptions","rows","setAllRows","onColumnClick","currentRows","column","isSortedDescending","isSorted","sortedItems","copyAndSort","convertedColumns","onRender","_2","fieldValue","GridViewFilter_1","onApplyFilter","buildFilters","hiddenFilterKeys","filterPanelTitle","groupPanelTitle","hiddenGroupKeys","GridViewGrouping_1","onApplyGrouping","_p","DropDown","lastAddedTag","rootItemKey","option","copyMap","selected","itemKey","isDateComponent","listContainsTagList","tag","tagList","compareTag","selectedKeys","keyToFilter","selectedTags","keyKind","mapWithSameKey","mapWithSameKeyValue","type","tags","current","selectedItem","currentFilter","result","f","toISOString","isNaN","getTime","isIsoDate","test","Intl","DateTimeFormat","format","columnKey","aValue","bValue","nestedObj","pathArr","subKeys","getDeepKeys","subkey","RangeType","require"],"mappings":"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","file":"GridView/index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/GridView/index.ts\");\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import * as React from 'react';\r\nimport { PrimaryButton } from '@fluentui/react/lib/Button';\r\nimport { IInfoCardProps } from '../models/interfaces/IInfoCardProps';\r\nimport { CSSProperties } from 'react';\r\n\r\nconst InfoCard = React.memo((props: IInfoCardProps) => {\r\n    const styles: Record<string, CSSProperties> = {\r\n        card: {\r\n            backgroundColor: \"rgb(255, 255, 255)\",\r\n            border: \"1px solid #ababab\",\r\n            margin: \"0 0 16px\",\r\n            borderRadius: \"4px\",\r\n            position: \"relative\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            width: props?.width || \"100%\",\r\n            height: props?.height || \"150px\",\r\n            userSelect: props?.enableUserSelect ? \"unset\" : \"none\",\r\n            color: \"#333\",\r\n            overflow: \"hidden\"\r\n        },\r\n        top: {\r\n            borderBottom: \"1px solid rgb(237, 235, 233)\",\r\n            overflow: \"hidden\",\r\n            height: \"100%\",\r\n            display: \"grid\",\r\n            gridTemplateColumns: \"1fr 120px\",\r\n            columnGap: \"8px\",\r\n            padding: \"16px\",\r\n            fontFamily: `\"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\", -apple-system, BlinkMacSystemFont, Roboto, \"Helvetica Neue\", sans-serif`\r\n        },\r\n        col: { display: \"flex\", flexDirection: \"column\" },\r\n        rightCol: { display: 'flex', flexDirection: 'column', alignItems: \"flex-end\" },\r\n        leftCol: { display: 'flex', flexDirection: 'column' },\r\n        cardTitle: {\r\n            display: \"-webkit-box\",\r\n            WebkitLineClamp: \"2\",\r\n            WebkitBoxOrient: \"vertical\",\r\n            overflow: \"hidden\",\r\n            fontSize: \"18px\",\r\n            lineHeight: 1.4\r\n        },\r\n        projectCode: {\r\n            fontSize: \"16px\",\r\n            opacity: 0.8\r\n        },\r\n        bottom: {\r\n            display: \"flex\",\r\n            padding: \"6px 16px\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-between\",\r\n            backgroundColor: \"rgb(250, 249, 248)\",\r\n            fontFamily: `\"Segoe UI\", \"Segoe UI Web (West European)\", \"Segoe UI\", -apple-system, BlinkMacSystemFont, Roboto, \"Helvetica Neue\", sans-serif`\r\n\r\n        },\r\n        circleWrap: { display: \"inline-flex\", alignItems: \"center\" },\r\n        circle: {\r\n            width: \"16px\",\r\n            height: \"16px\",\r\n            background: \"#06ad51\",\r\n            borderRadius: \"50%\",\r\n            border: \"1px solid #06ad51\",\r\n            display: \"inline-block\"\r\n        },\r\n        status: { display: \"inline-block\", marginLeft: \"8px\" },\r\n        linkButton: { width: \"32px\", height: \"32px\", minWidth: \"32px\" }\r\n    }\r\n\r\n\r\n    return (\r\n        <div onClick={(e) => {\r\n            if (props.onCardClick)\r\n                props?.onCardClick(e);\r\n        }} style={styles.card}>\r\n            <div data-class-name=\"card-top\" style={styles.top}>\r\n                <div data-class-name=\"card-top-left\" style={styles.leftCol}>\r\n                    <div style={styles.cardTitle}>\r\n                        <span>{props?.cardTitle}</span>\r\n                    </div>\r\n                    <div style={styles.projectCode}>\r\n                        <span>{props?.cardSubtitle}</span>\r\n                    </div>\r\n                </div>\r\n                <div data-class-name=\"card-top-right\" style={props?.cardRightColInformation?.containerStyle ?? styles.rightCol}>\r\n                    {props?.cardRightColInformation?.values?.length > 0 && props?.cardRightColInformation?.values.map((value, idx) => (\r\n                        <div key={value?.title ?? idx} style={value?.style ?? styles.plantName}>\r\n                            <span>{value?.title}</span>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            <div data-class-name=\"card-bottom\" style={styles.bottom}>\r\n                <div data-class-name=\"card-circle-wrapper\" style={styles.circleWrap}>\r\n                    <div style={props?.circleIndicator?.color ? { ...styles.circle, background: props?.circleIndicator?.color, border: `1px solid ${props?.circleIndicator?.color}` } : {}}></div>\r\n                    <span style={styles.status}>{props?.circleIndicator?.title}</span>\r\n                </div>\r\n                <div data-class-name=\"card-button-container\">\r\n                    <PrimaryButton onClick={props?.onClickDownButton} style={styles.linkButton} iconProps={{ iconName: props?.iconName || 'Page' }} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default InfoCard;","import { createContext } from \"react\";\r\nimport type { IListOptionsProps } from \"../models/interfaces/IListOptions\";\r\nimport type { IPanelFilterProps } from '../models/interfaces/IPanelFilter';\r\nimport type { IGroupPanel } from '../models/interfaces/IGroupPanel';\r\n\r\nexport const ListOptionsContext = createContext<IListOptionsProps>({ \r\n    enableFilter: true, \r\n    enableSearch: true,\r\n    enableCardView: true,\r\n    customButtons: [], \r\n    setIsFilterPanelOpen: undefined, \r\n    searchBoxPlaceholder: '',\r\n    setRenderAs: undefined, \r\n    defaultButtonsOrder: { group: 0, search: 1, filter: 2, card: 3 },\r\n    setIsGroupPanelOpen: undefined\r\n});\r\n\r\nexport const FilterPanelContext = createContext<IPanelFilterProps>({ \r\n    isOpen: false, \r\n    onApply: undefined, \r\n    availableFilters: [], \r\n    onCancel: undefined, \r\n    onClose: undefined, \r\n    panelTitle: '',\r\n    actualFilteredValues: new Map(),\r\n    setActualFilteredValues: undefined,\r\n    onOpen: undefined,\r\n    fromDate: null,\r\n    toDate: new Date(),\r\n    setFromDate: undefined,\r\n    setToDate: undefined\r\n});\r\n\r\nexport const GroupPanelContext = createContext<IGroupPanel>({\r\n    isOpen: false, \r\n    onApply: undefined,\r\n    onCancel: undefined,\r\n    onClose: undefined,\r\n    onOpen: undefined,\r\n    panelTitle: '',\r\n    options: [],\r\n    selectedGroupKeys: null,\r\n    setSelectedGroupKeys: undefined\r\n});","import * as React from 'react';\r\nimport { RangeType } from '../helpers/enums';\r\nimport { Slider, ISliderProps } from '@fluentui/react/lib/Slider';\r\nimport { DatePicker } from '@fluentui/react/lib/DatePicker';\r\nimport type { IDateSliderProps } from '../models/interfaces/IDateSlider';\r\nimport { useContext, useEffect, useState, memo, useMemo } from 'react';\r\nimport { FilterPanelContext } from './Contexts';\r\n\r\nfunction DateSliderComponent(props: IDateSliderProps) {\r\n    const [displayDatePicker, setDisplayDatePicker] = useState(false);\r\n    const {fromDate, toDate, setFromDate, setToDate} = useContext(FilterPanelContext);\r\n    const formatSliderValue = (num: number): string => num === 0 ? 'Nenhum' : num === 1 ? 'Última Semana' : num === 2 ? 'Último Mês' : num === 3 ? 'Últimos Ano' : '';\r\n    const onSliderChange: ISliderProps['onChanged'] = (_, val) => {\r\n        if(val === 4)\r\n            setDisplayDatePicker(true);\r\n        else {\r\n            setDisplayDatePicker(false);\r\n            setFromDate(null);\r\n            setToDate(new Date());\r\n        }\r\n        if(val === 0) {\r\n            props.onRecordDateRange(null, null, RangeType.NONE);\r\n        }\r\n        else if(val === 1) {\r\n            const lastWeek = new Date();\r\n            lastWeek.setDate(lastWeek.getDate() - 7);\r\n            props.onRecordDateRange(lastWeek, new Date(), RangeType.WEEK);\r\n        }\r\n        else if(val === 2) {\r\n            const lastMonth = new Date();\r\n            lastMonth.setMonth(lastMonth.getMonth() - 1);\r\n            props.onRecordDateRange(lastMonth, new Date(), RangeType.MONTH);\r\n        }\r\n        else if(val === 3) {\r\n            const lastYear = new Date();\r\n            lastYear.setFullYear(lastYear.getFullYear() - 1);\r\n            props.onRecordDateRange(lastYear, new Date(), RangeType.YEAR);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(fromDate && toDate)\r\n            props.onRecordDateRange(fromDate, toDate, RangeType.CUSTOM);\r\n    }, [fromDate, toDate]);\r\n\r\n    useEffect(() => {\r\n        if(props?.defaultSliderValue === 4 && !displayDatePicker)\r\n            setDisplayDatePicker(true);\r\n    }, [props?.defaultSliderValue]);\r\n\r\n    const dateStrings = useMemo(() => ({\r\n        months: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],\r\n        shortMonths: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],\r\n        days: ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'],\r\n        shortDays: ['D', 'S', 'T', 'Q', 'Q', 'S', 'S'],\r\n        goToToday: 'Hoje',\r\n        prevMonthAriaLabel: 'Mês anterior',\r\n        nextMonthAriaLabel: 'Próximo mês',\r\n        prevYearAriaLabel: 'Ano anterior',\r\n        nextYearAriaLabel: 'Próximo ano',\r\n        closeButtonAriaLabel: 'Fechar',\r\n        isRequiredErrorMessage: 'Este campo é obrigatório.',\r\n        invalidInputErrorMessage: 'Valor de entrada inválido.',\r\n        isOutOfBoundsErrorMessage: 'Valor de entrada fora dos limites.',\r\n        showWeekNumbers: false,\r\n        weekNumberFormatString: '',\r\n        firstWeekOfYear: 0,\r\n        dateFormat: 'd',\r\n        showGoToToday: true,\r\n    }), []);\r\n\r\n    return (<>\r\n    <Slider\r\n        min={0} max={4} step={1}\r\n        defaultValue={props?.defaultSliderValue ?? 0} styles={{container: { display: 'grid' }}}\r\n        valueFormat={formatSliderValue}\r\n        onChanged={onSliderChange}\r\n        label={props?.label}/>\r\n    {displayDatePicker && \r\n        <div>\r\n            <DatePicker\r\n                maxDate={toDate}\r\n                strings={dateStrings}\r\n                value={fromDate}\r\n                formatDate={(date) => date?.toLocaleDateString()}\r\n                onSelectDate={(d) => {\r\n                    setFromDate(d);\r\n                }}\r\n                label=\"De\"/>\r\n            <DatePicker\r\n                minDate={fromDate}\r\n                strings={dateStrings}\r\n                formatDate={(date) => date?.toLocaleDateString()}\r\n                onSelectDate={(d) => {\r\n                    setToDate(d);\r\n                }}\r\n                value={toDate}\r\n                label=\"Até\"/>\r\n        </div>\r\n    }\r\n    </>);\r\n}\r\n\r\nexport const DateSlider = memo(DateSliderComponent);","import * as React from 'react';\r\nimport { useGridController } from './hooks/useGridController';\r\nimport { FilterPanelContext, GroupPanelContext, ListOptionsContext } from './Contexts';\r\nimport { CheckboxVisibility, CollapseAllVisibility, DetailsList, DetailsListLayoutMode } from '@fluentui/react/lib/DetailsList';\r\nimport { Sticky, StickyPositionType } from '@fluentui/react/lib/Sticky';\r\nimport type { IGridListProps } from '../models/interfaces/IGridView';\r\nimport PanelFilter from './PanelFilter';\r\nimport GroupPanel from './GroupPanel';\r\nimport { ListOptions } from './ListOptions';\r\nimport { Suspense } from 'react';\r\n\r\n/** Mudar nome do componente talvez? Ele é mais do que só um Grid. */\r\nexport function GridView<T = any>(props: IGridListProps<T>) {\r\n    const {state, handlers, JSX} = useGridController(props);\r\n    const {CardsList} = JSX;\r\n    const {actualRows, cols, isFilterPanelOpen, filterPanelConfig, groupPanelConfig, listConfig, shouldRenderCard, isGroupPanelOpen, groups} = state;\r\n    const {onItemClick} = handlers;\r\n\r\n    return (\r\n        <GroupPanelContext.Provider value={groupPanelConfig}>\r\n        <FilterPanelContext.Provider value={filterPanelConfig}>\r\n        <ListOptionsContext.Provider value={listConfig}>\r\n            <div>\r\n                <ListOptions />\r\n                <div data-is-scrollable=\"true\" style={{ position: 'relative', zIndex: 0 }}>\r\n                    {\r\n                    !!props?.onRenderCustomComponent ? actualRows?.map(i => props?.onRenderCustomComponent(i)) :\r\n                    !shouldRenderCard ? \r\n                    <DetailsList\r\n                        {...props?.detailsListProps}\r\n                        onRenderItemColumn={props?.onRenderItemColumn}\r\n                        onRenderRow={(p, defaultRender) => <div onClick={() => onItemClick(p?.item)}>{defaultRender({ ...p, styles: { root: { cursor: props?.onItemClick ? 'pointer' : 'default' } } })}</div>}\r\n                        items={actualRows} columns={cols}\r\n                        groups={groups}\r\n                        groupProps={{\r\n                            isAllGroupsCollapsed: /*props?.groups ? props?.groups.filter(gr => !gr?.isCollapsed)?.length === 0 :*/ true,\r\n                            collapseAllVisibility: CollapseAllVisibility.visible,\r\n                            onRenderHeader: (props, defaultRender) => {\r\n                                if (!props.group!.name)\r\n                                    return <></>;\r\n                                return defaultRender(props);\r\n                            },\r\n                            showEmptyGroups: false\r\n                        }}\r\n                        layoutMode={DetailsListLayoutMode.fixedColumns} isHeaderVisible={true}\r\n                        onRenderDetailsHeader={(headerProps, defaultRender) => (\r\n                            <Sticky key={headerProps?.key} stickyPosition={StickyPositionType.Header} stickyBackgroundColor=\"transparent\">\r\n                                <div key={headerProps?.key}>{defaultRender!(headerProps)}</div>\r\n                            </Sticky>)}\r\n                        checkboxVisibility={props?.detailsListProps?.checkboxVisibility ?? CheckboxVisibility.hidden}\r\n                    /> :\r\n                    <Suspense fallback={'...'}>\r\n                        <div id=\"gridView-cardContainer\" style={props?.cardProps?.containerStyle ?? {display: 'grid', gap: 12, gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))'}}>\r\n                        {CardsList}\r\n                        </div>\r\n                    </Suspense>\r\n                    }\r\n                </div>\r\n                {isFilterPanelOpen && <PanelFilter />}\r\n                {isGroupPanelOpen && <GroupPanel />}\r\n            </div>\r\n        </ListOptionsContext.Provider>\r\n        </FilterPanelContext.Provider>\r\n        </GroupPanelContext.Provider>);\r\n}","import * as React from 'react';\r\nimport { lazy, useContext, useMemo, Suspense } from 'react';\r\nimport { GroupPanelContext } from './Contexts';\r\n\r\nfunction GroupPanel() {\r\n    const {isOpen, panelTitle, onApply, onCancel, onClose, options, selectedGroupKeys, setSelectedGroupKeys} = useContext(GroupPanelContext);\r\n    const [FluentPanel, PrimaryButton, DefaultButton, RadioButton] = useMemo(() => {\r\n        const Panel = lazy(() => import('@fluentui/react/lib/Panel').then(({ Panel }) => ({ default: Panel })));\r\n        const PrimaryButton = lazy(() => import('@fluentui/react/lib/Button').then(({ PrimaryButton }) => ({ default: PrimaryButton })));\r\n        const DefaultButton = lazy(() => import('@fluentui/react/lib/Button').then(({ DefaultButton }) => ({ default: DefaultButton })));\r\n        const RadioButton = lazy(() => import('@fluentui/react/lib/ChoiceGroup').then(({ ChoiceGroup }) => ({ default: ChoiceGroup })));\r\n        return [Panel, PrimaryButton, DefaultButton, RadioButton];\r\n    }, []);\r\n\r\n    if(!isOpen) return null;\r\n    return (\r\n        <Suspense fallback={<div>...</div>}>\r\n            <FluentPanel\r\n                isFooterAtBottom={true}\r\n                onDismiss={onClose} isOpen={isOpen}\r\n                onRenderFooter={_ => (<div style={{padding: 20}}>\r\n                    <Suspense fallback={'...'}>\r\n                        <PrimaryButton onClick={() => onApply(selectedGroupKeys)} styles={{root: {marginRight: 8}}}>\r\n                            Aplicar\r\n                        </PrimaryButton>\r\n                    </Suspense>\r\n                    <Suspense fallback={'...'}>\r\n                        <DefaultButton onClick={onCancel}>Cancelar</DefaultButton>\r\n                    </Suspense>\r\n                  </div>)}>\r\n                <h2>{panelTitle}</h2>\r\n                <Suspense fallback={'...'}>\r\n                    <RadioButton\r\n                        onChange={(_, opt) => {\r\n                            const keyWithName = `${opt?.key};${opt?.text}` as const;\r\n                            setSelectedGroupKeys(keyWithName);\r\n                        }}\r\n                        defaultSelectedKey={selectedGroupKeys?.split(';')?.[0] ?? undefined}\r\n                        options={[{key: '@NONE', text: 'Nenhum'} ,...options]}/>\r\n                </Suspense>\r\n            </FluentPanel>\r\n        </Suspense>\r\n    );\r\n}\r\n\r\nexport default React.memo(GroupPanel);","import * as React from 'react';\r\nimport { CSSProperties } from 'react';\r\nimport { DefaultButton, PrimaryButton, TextField } from '@fluentui/react'\r\nimport {GroupPanelContext, ListOptionsContext} from './Contexts';\r\n\r\nexport const ListOptions = () => {\r\n    const {customButtons, enableFilter, enableSearch, searchKeys, onSearchItem, setIsFilterPanelOpen, defaultButtonsOrder, searchBoxPlaceholder, enableCardView, setRenderAs, enableGrouping} = React.useContext(ListOptionsContext);\r\n    const {onOpen} = React.useContext(GroupPanelContext);\r\n\r\n    const defaultStyles: Record<string, CSSProperties> = {\r\n        container: {\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            gap: 4,\r\n            justifyContent: 'end',\r\n            margin: '8px 0'\r\n        }\r\n    }\r\n\r\n    return (\r\n    <div data-class-name=\"grid-view-header-container\" style={defaultStyles.container}>\r\n        {enableGrouping &&\r\n        <DefaultButton \r\n            onClick={ _ => onOpen()} styles={{label: {fontSize: 14}, root: {order: defaultButtonsOrder?.group}}} iconProps={{iconName: 'GroupList'}} />}\r\n        {enableCardView && \r\n        <DefaultButton \r\n            onClick={_ => setRenderAs()} styles={{label: {fontSize: 14}, root: {order: defaultButtonsOrder?.card}}} iconProps={{iconName: 'GridViewMedium'}} />}\r\n        {customButtons?.length > 0 && customButtons?.map((b, idx) => \r\n            <PrimaryButton key={b?.text + \"_\" + idx} className={b?.className} styles={{label: {fontSize: 14}, root: {order: b?.position ?? 'unset'}}} {...b?.props}>{b?.text}</PrimaryButton>)}\r\n        {(enableSearch && searchKeys) && \r\n        <TextField \r\n            onChange={(_, newValue) => onSearchItem(newValue, searchKeys)} placeholder={searchBoxPlaceholder}\r\n            iconProps={{iconName: 'Search'}} styles={{root: {width: 320, order: defaultButtonsOrder?.search}, icon: {color: '[theme: themePrimary, default: #0078D4]'}}} />}\r\n        {enableFilter && \r\n        <DefaultButton \r\n            onClick={_ => setIsFilterPanelOpen(true)} styles={{label: {fontSize: 14}, root: {order: defaultButtonsOrder?.filter}}} iconProps={{iconName: 'Filter'}} />}\r\n    </div>);\r\n}","import * as React from 'react';\r\nimport {DateSlider} from './DateSlider';\r\nimport {PeoplePicker} from './PeoplePicker';\r\nimport {usePanelFilterController} from './hooks/usePanelFilterController';\r\n\r\nfunction PanelFilter() {\r\n    const {JSX, state, handlers} = usePanelFilterController();\r\n    const {actualFilteredValues, panelTitle, availableFilters, isOpen} = state;\r\n    const {FluentPanel, PrimaryButton, Dropdown, TagPicker, DefaultButton} = JSX;\r\n    const { onClose, onCancel, getDefaultDropdownSelectedKeys, onAddOrRemoveToMap, \r\n            getDefaultSelectedTag, getDefaultSelectedSlider } = handlers;\r\n\r\n    if (!isOpen) return null;\r\n    return (\r\n        <React.Suspense fallback={<div>...</div>}>\r\n            <FluentPanel \r\n                onRenderFooter={_ => (<div style={{padding: 20}}>\r\n                    <React.Suspense fallback={'...'}>\r\n                        <PrimaryButton onClick={() => handlers.onApply(actualFilteredValues)} styles={{root: {marginRight: 8}}}>\r\n                            Aplicar\r\n                        </PrimaryButton>\r\n                    </React.Suspense>\r\n                    <React.Suspense fallback={'...'}>\r\n                        <DefaultButton onClick={onCancel}>Cancelar</DefaultButton>\r\n                    </React.Suspense>\r\n                  </div>)}\r\n                isFooterAtBottom={true}\r\n                onDismiss={onClose} isOpen={isOpen}>\r\n                <h2>{panelTitle}</h2>\r\n                {availableFilters?.map((filter, idx) => {\r\n                    const options = handlers.mapOptions(filter?.options);\r\n                    return (<React.Suspense key={filter?.key + \"-\" + idx} fallback={'...'}>\r\n                        {(filter.renderAs === 'Dropdown') ? \r\n                        <Dropdown\r\n                            defaultSelectedKeys={getDefaultDropdownSelectedKeys()}\r\n                            key={filter?.key + \"-\" + idx} options={options}\r\n                            multiSelect={filter?.enableMultiple} label={filter?.name}\r\n                            onChange={(_, opt) => onAddOrRemoveToMap(filter?.key, opt)} /> :\r\n                        (filter.renderAs === 'SearchBox') ?\r\n                        <div key={filter?.key + \"-\" + filter?.name + \"-\" + idx}>\r\n                        <label>{filter?.name}</label>\r\n                        <TagPicker \r\n                            key={filter?.key + \"-\" + idx}\r\n                            getTextFromItem={item => item?.name}\r\n                            defaultSelectedItems={getDefaultSelectedTag(filter.key)}\r\n                            pickerSuggestionsProps={{\r\n                                suggestionsHeaderText: \"Sugestões\",\r\n                                noResultsFoundText: \"Nenhum resultado encontrado\",\r\n                                loadingText: \"Carregando...\"\r\n                            }}\r\n                            pickerCalloutProps={{doNotLayer: true}}\r\n                            onChange={handlers.onChangeTags(options)}\r\n                            onItemSelected={handlers.onTagSelected(filter?.key)}\r\n                            onResolveSuggestions={handlers.onResolveTagSuggestion(options)} /></div> :\r\n                        (filter.renderAs === 'DateSlider') ?\r\n                        <DateSlider\r\n                            defaultSliderValue={getDefaultSelectedSlider(filter?.key)}\r\n                            onRecordDateRange={handlers.onRecordDateChange(filter?.key)}\r\n                            key={filter?.key + \"-\" + idx}\r\n                            label={filter?.name}/> :\r\n                        (filter?.renderAs === 'PeoplePicker') ?\r\n                        <PeoplePicker \r\n                            label={filter?.name} key={filter?.key + \"-\" + idx}\r\n                            people={options}\r\n                            defaultSelectedItems={handlers.getDefaultSelectedPeople(filter?.key)}\r\n                            onChangePeople={handlers.onChangePeople(filter?.key)} /> : null\r\n                        }\r\n                    </React.Suspense>);\r\n                })}\r\n            </FluentPanel>\r\n        </React.Suspense>\r\n    );\r\n}\r\n\r\nexport default React.memo(PanelFilter);","import * as React from 'react';\r\nimport { IPersonaProps } from '@fluentui/react/lib/Persona';\r\nimport { CompactPeoplePicker, IBasePickerSuggestionsProps, ValidationState } from '@fluentui/react/lib/Pickers';\r\n\r\nconst suggestionProps: IBasePickerSuggestionsProps = {\r\n    suggestionsHeaderText: 'Pessoas sugeridas',\r\n    mostRecentlyUsedHeaderText: 'Pessoas mais recentes',\r\n    noResultsFoundText: 'Nenhum resultado encontrado',\r\n    loadingText: 'Carregando',\r\n    showRemoveButtons: true,\r\n    suggestionsAvailableAlertText: 'Sugestões disponíveis',\r\n    suggestionsContainerAriaLabel: 'Pessoas sugeridas',\r\n};\r\n\r\ninterface IPeoplePickerProps {\r\n    label: string;\r\n    people: IPersonaProps[];\r\n    onChangePeople: (items: IPersonaProps[]) => void;\r\n    defaultSelectedItems?: IPersonaProps[];\r\n}\r\n\r\nexport const PeoplePicker = (props: IPeoplePickerProps) => {\r\n    const [peopleList, setPeopleList] = React.useState<IPersonaProps[]>(props.people);\r\n    const picker = React.useRef(null);\r\n\r\n    const onFilterChanged = (filterText: string, currentPersonas: IPersonaProps[], limitResults?: number): IPersonaProps[] | Promise<IPersonaProps[]> => {\r\n        if (!filterText)\r\n            return [];\r\n        let filteredPersonas: IPersonaProps[] = filterPersonasByText(filterText);\r\n        filteredPersonas = removeDuplicates(filteredPersonas, currentPersonas);\r\n        filteredPersonas = limitResults ? filteredPersonas.slice(0, limitResults) : filteredPersonas;\r\n        return filteredPersonas;\r\n    };\r\n\r\n    const filterPersonasByText = (filterText: string)=> peopleList.filter(item => doesTextStartWith(item.text as string, filterText));\r\n    \r\n    const onRemoveSuggestion = (item: IPersonaProps): void => {\r\n        const indexPeopleList: number = peopleList.indexOf(item);\r\n        if (indexPeopleList >= 0) {\r\n            const newPeople: IPersonaProps[] = peopleList\r\n                .slice(0, indexPeopleList)\r\n                .concat(peopleList.slice(indexPeopleList + 1));\r\n            setPeopleList(newPeople);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <label>{props.label}</label>\r\n            <CompactPeoplePicker\r\n                onResolveSuggestions={onFilterChanged}\r\n                getTextFromItem={getTextFromItem}\r\n                pickerSuggestionsProps={suggestionProps}\r\n                defaultSelectedItems={props?.defaultSelectedItems}\r\n                onChange={props?.onChangePeople}\r\n                className={'ms-PeoplePicker'}\r\n                onRemoveSuggestion={onRemoveSuggestion}\r\n                onValidateInput={validateInput}\r\n                componentRef={picker}\r\n                resolveDelay={300}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst doesTextStartWith = (text: string, filter: string) => text?.toLowerCase()?.indexOf(filter?.toLowerCase()) === 0;\r\n\r\nconst removeDuplicates = (personas: IPersonaProps[], possibleDupes: IPersonaProps[]) => personas.filter(persona => !listContainsPersona(persona, possibleDupes));\r\n\r\nfunction listContainsPersona(persona: IPersonaProps, personas: IPersonaProps[]) {\r\n    if (!personas || !personas.length || personas.length === 0) \r\n        return false;\r\n    return personas.filter(item => item?.text === persona?.text)?.length > 0;\r\n}\r\n\r\nconst getTextFromItem = (persona: IPersonaProps) => persona?.text;\r\n\r\nfunction validateInput(input: string): ValidationState {\r\n    if (input.indexOf('@') !== -1) \r\n        return ValidationState.valid;\r\n    else if (input.length > 1) \r\n        return ValidationState.warning;\r\n    return ValidationState.invalid;\r\n}","import { Utils } from '../../helpers/Utils';\r\nimport { GridViewMapper } from './GridViewMapper';\r\nimport type { IRow, TColumn } from '../../models/interfaces/IGridView';\r\nimport type { ApplyFilter, SearchItem } from '../../models/types/Common';\r\nimport type { FilterOption, IAvailableFilters } from '../../models/interfaces/IPanelFilter';\r\n\r\nexport class GridViewFilter {\r\n\r\n    static onApplyFilter: ApplyFilter = ({allRows, setActualRows, setIsFilterPanel}) => (selectedItems) => {\r\n        /**Se não tiver nada no map, limpa os filtros. */\r\n        if(selectedItems.size === 0) {\r\n            setActualRows(allRows);\r\n            return setIsFilterPanel(false);\r\n        }\r\n        //Agrupa os maps selecionados em um outro grupo maior, dividindo por tipo. (key: tipo, value: map)\r\n        const groupedMaps = GridViewMapper.groupMaps(selectedItems);\r\n        let filteredRows: IRow[] = [];\r\n        /**Para cada key principal dos maps selecionados */\r\n        for(const [mapKey, map] of groupedMaps.entries()) {\r\n            //Se tivesse algo memorizando o filtro poderia colocar aqui, porém no momento ele sempre vai começar filtrando todas colunas inicialmente (idx 0).\r\n            const filterFrom = filteredRows?.length > 0 ? filteredRows : allRows;\r\n            //Para cada map selecionado\r\n            map?.forEach(value => {\r\n                const isDate = !!value?.data?.from && !!value?.data?.to;\r\n                const ORrowsFromThisKey = filterFrom.filter(r => {\r\n                    //Verifica se os dados do map são do tipo data.\r\n                    if(isDate) {\r\n                        const from: Date = value?.data?.from;\r\n                        const to: Date = value?.data?.to;\r\n                        const rDate: Date = new Date(Utils.getNestedObject(r, mapKey.split('.')));\r\n                        return rDate >= from && rDate <= to;\r\n                    }\r\n                    //Se não for data, verifica se o valor do map é igual ao valor do map do row comparando os valores pela key.\r\n                    return Utils.getNestedObject(r, mapKey.split('.')) === value?.text;\r\n                });\r\n                //Se os rows filtrados do OR não estiverem no filteredRows, verificando pelo Id, adiciona. (Campos do tipo data não tem como comparar Id)\r\n                if(ORrowsFromThisKey.length > 0 && !filteredRows?.map(r => r?.Id)?.includes(value?.data?.Id))\r\n                    filteredRows.push(...ORrowsFromThisKey);\r\n            });\r\n        }\r\n        //Garante que o array filtrada não vai ter nenhum item repetido.\r\n        filteredRows = filteredRows.filter((obj, pos, arr) => arr.map(mapObj => mapObj?.Id).indexOf(obj?.Id) === pos);\r\n        //Outra iteração dos maps selecionados, desta vez para verificar a condição de AND.\r\n        for(const [mapKey, map] of groupedMaps.entries()) {\r\n            //Pega todos os possíveis valores do map atual.\r\n            const allMapValues = [...map.values()];\r\n            //Cria um novo array temporário, filtrando dos arays já filtrados, verificando se no allMapValues está presente no filteredRows.\r\n            const newFilteredItems = filteredRows.filter(r => {\r\n                const rowValue = Utils.getNestedObject(r, mapKey.split('.'));\r\n                //return allMapValues.map(v => v?.text).includes(rowValue as string); \r\n                return allMapValues.some(v => {\r\n                    if(v?.data?.from && v?.data?.to) {\r\n                        const from: Date = v?.data?.from;\r\n                        const to: Date = v?.data?.to;\r\n                        const rDate: Date = new Date(rowValue as string);\r\n                        return rDate >= from && rDate <= to;\r\n                    }\r\n                    return v?.text === rowValue\r\n                });\r\n            });\r\n            if(newFilteredItems?.length > 0)\r\n                filteredRows = newFilteredItems;\r\n        }\r\n        //Garante novamente que o array filtrada não vai ter nenhum item repetido.\r\n        filteredRows = filteredRows.filter((obj, pos, arr) => arr.map(mapObj => mapObj?.Id).indexOf(obj?.Id) === pos);\r\n        setActualRows(filteredRows)\r\n        setIsFilterPanel(false);\r\n    }\r\n\r\n    /**Generate the components of each available column and it's unique values */\r\n    static buildFilters(allRows: IRow[], columns: TColumn<any>[], hiddenFields: string[]): IAvailableFilters[] {\r\n        const filters: IAvailableFilters[] = [];\r\n        const columnsToFilter = GridViewFilter.filterFromColumns(hiddenFields, columns);\r\n        for (let index = 0; index < columnsToFilter.length; index++) {\r\n            const col = columnsToFilter[index];\r\n            const renderAs = col?.renderFilterAs ?? 'Dropdown';\r\n            const keys = col?.key?.split('.') ?? col.fieldName?.split('.'); \r\n            const options: FilterOption[] = allRows?.filter(d => d)?.map((data, idx) => {\r\n                let stringObject = Utils.getNestedObject(data, keys)?.toString();\r\n                if (col?.dateConversionOptions?.shouldConvertToLocaleString)\r\n                    stringObject = Utils.convertIsoToLocaleString(stringObject, col?.dateConversionOptions?.locales, col?.dateConversionOptions?.formatOptions);\r\n                return {\r\n                    key: idx + \"_\" + col?.key,\r\n                    text: stringObject,\r\n                    data\r\n                };\r\n            });\r\n            const uniqueOptions = options?.filter((obj, pos, arr) => arr.map(mapObj => mapObj?.text).indexOf(obj?.text) === pos);\r\n\r\n            filters.push({\r\n                key: col?.key,\r\n                options: uniqueOptions,\r\n                enableMultiple: true,\r\n                name: col?.name,\r\n                renderAs\r\n            });\r\n        }\r\n        return filters;\r\n    }\r\n\r\n    static filterFromColumns = (hiddenKeys: string[], columns: TColumn<any>[]) => columns.filter(c => (!hiddenKeys?.includes(c?.key)));\r\n\r\n    static onSearchItem: SearchItem = ({allRows, setActualRows}) => (searchText, keys) => {\r\n        const filteredRows: IRow[] = []; \r\n        if(!searchText) \r\n            return setActualRows(allRows);\r\n        \r\n        filteredRows.push(...allRows?.filter(item => {\r\n            const itemValues: string[] = [];\r\n            for (const key of keys) {\r\n                const value = Utils.getNestedObject(item, (key as string)?.split('.'));\r\n                if(value !== undefined && value !== null)\r\n                    itemValues.push(value.toString());\r\n            }\r\n            const containsText = itemValues.some(v => v?.toLowerCase().includes(searchText?.toLowerCase()));\r\n            return containsText;\r\n        }));\r\n        setActualRows(filteredRows);\r\n    }\r\n}","import { Utils } from '../../helpers/Utils';\r\nimport type { IGroup } from \"@fluentui/react/lib/DetailsList\";\r\nimport type { ApplyGrouping } from \"../../models/types/Common\";\r\n\r\nexport class GridViewGrouping {\r\n    \r\n    static onApplyGrouping: ApplyGrouping = ({actualRows, cols, setGroups, setIsGroupPanel, emptyGroupLabel}) => (keyAndName) => {\r\n        const defaultEmptyLabel = emptyGroupLabel ?? 'Sem itens definidos';\r\n        if (!keyAndName || keyAndName?.split(';')?.[0] === '@NONE') {\r\n            setIsGroupPanel(false);\r\n            return setGroups(undefined);\r\n        }\r\n        const groups: IGroup[] = [...actualRows]\r\n            .sort((a, b) => (a?.Id as number) - (b?.Id as number))\r\n            .reduce<IGroup[]>((acc, cur) => {\r\n                const [key, name] = keyAndName?.split(';');\r\n                let valueFromKey = Utils.getNestedObject(cur, key.split('.')) as string ?? defaultEmptyLabel;\r\n                const isKeyADate = cols.find(i => i?.key === key)?.dateConversionOptions?.shouldConvertToLocaleString;\r\n                if (isKeyADate)\r\n                    valueFromKey = Utils.convertIsoToLocaleString(\r\n                        valueFromKey, \r\n                        cols.find(i => i?.key === key)?.dateConversionOptions?.locales, \r\n                        cols.find(i => i?.key === key)?.dateConversionOptions?.formatOptions);\r\n                \r\n                const group: IGroup = {\r\n                    key: valueFromKey,\r\n                    name: `${name}: ${valueFromKey}`,\r\n                    startIndex: 0,\r\n                    count: 1,\r\n                }\r\n                if (acc.length === 0) {\r\n                    acc.push(group)\r\n                    return acc\r\n                } else if (!acc?.map(i => i?.key).includes(valueFromKey)) {\r\n                    const count = acc?.filter(g => g?.key === valueFromKey).length;\r\n                    const startIndex = acc[acc.length - 1]?.startIndex + acc[acc.length - 1]?.count;\r\n                    acc.push({\r\n                        key: valueFromKey,\r\n                        name: `${name}: ${valueFromKey}`,\r\n                        startIndex,\r\n                        count\r\n                    });\r\n                }\r\n                const lastAcc = acc[acc.length - 1];\r\n                if (lastAcc?.key === valueFromKey)\r\n                    acc[acc.length - 1].count++;\r\n                return acc\r\n            }, []);\r\n        setGroups(groups);\r\n        setIsGroupPanel(false);\r\n    }\r\n}","import { SelectedItemsMap } from \"../../models/interfaces/IPanelFilter\";\r\n\r\n/**Internal class to be used when using map data operations on the GridView component context as a whole. */\r\nexport class GridViewMapper {\r\n\r\n    /**\r\n     * Creates a new map collection with the first level keys being the real keys, and the values being the maps with selected maps (with key and values) \r\n     * @example \r\n     * ```ts\r\n     * const selectedItemsMap = new Map([['0_User.Title', data], ['1_User.Title', data]]);\r\n     * const groupedMap = GridViewMapper.groupMaps(selectedItemsMap);\r\n     * //It'll be: key: 'User.Title', value: [Map([['0_User.Title', data], ['1_User.Title', data]])]\r\n     * ```\r\n     **/\r\n    static groupMaps(selectedItems: SelectedItemsMap): Map<string, SelectedItemsMap> {\r\n        const mapsByKeyKind = new Map<string, SelectedItemsMap>();\r\n        selectedItems.forEach((_, key, map) => {\r\n            let keyName = key.split('_')[1];\r\n            if(!keyName && !key.includes('_'))\r\n                keyName = key;\r\n            const doesNotHaveKey = !mapsByKeyKind.has(keyName);\r\n            const sameMapsList = [...map].filter(d => d[0] === key);\r\n            if(doesNotHaveKey) \r\n                mapsByKeyKind.set(keyName, new Map(sameMapsList));\r\n            else {\r\n                const thisKindMap = mapsByKeyKind.get(keyName);\r\n                sameMapsList.forEach(d => thisKindMap?.set(d[0], d[1]));\r\n            } \r\n        });\r\n        return mapsByKeyKind;\r\n    }\r\n}","import * as React from 'react';\r\nimport { useEffect, Dispatch, SetStateAction, useMemo, lazy } from 'react';\r\nimport { Utils } from '../../helpers/Utils';\r\nimport { IRow, ICardProps } from '../../models/interfaces/IGridView';\r\nimport { IInfoCardProps } from '../../models/interfaces/IInfoCardProps';\r\n\r\ninterface IGridCardHandler {\r\n    renderAs: 'card' | 'list';\r\n    enableGrouping: boolean;\r\n    shouldRenderCard: boolean;\r\n    actualRows: IRow[];\r\n    cardProps: ICardProps;\r\n    setShouldRenderCard: Dispatch<SetStateAction<boolean>>;\r\n    setEnableGrouping: Dispatch<SetStateAction<boolean>>;\r\n    onRenderCustomComponent: (item: IRow) => React.ReactNode;\r\n    onItemClick: (item: IRow) => void;\r\n}\r\nexport function useGridCardRendering({\r\n    renderAs, \r\n    setEnableGrouping, \r\n    setShouldRenderCard, \r\n    enableGrouping, \r\n    actualRows, \r\n    shouldRenderCard, \r\n    cardProps, \r\n    onRenderCustomComponent,\r\n    onItemClick\r\n}: IGridCardHandler) {\r\n    useEffect(() => {\r\n        if (renderAs === 'card') {\r\n            setShouldRenderCard(true);\r\n            if (!cardProps || Object?.keys(cardProps)?.length === 0)\r\n                console.error(\"[GridView] - You are using `renderAs: card`, but you are not passing cardProps. This will not work.\");\r\n            return setEnableGrouping(false);\r\n        }\r\n        setShouldRenderCard(false);\r\n        if (enableGrouping)\r\n            setEnableGrouping(true);\r\n    }, [renderAs]);\r\n\r\n    const Card = useMemo(() => {\r\n        if (!shouldRenderCard) return null;\r\n        return lazy(() => import('../../Card/Card').then((module) => ({ default: module?.default })));\r\n    }, [shouldRenderCard]);\r\n\r\n    const CardsList = useMemo(() => {\r\n        if (!Card || renderAs === 'list') return null;\r\n\r\n        return actualRows?.map(row => {\r\n            if (!!onRenderCustomComponent)\r\n                return onRenderCustomComponent(row);\r\n            let cardTitle: string = Utils.getNestedObject(row, cardProps?.cardTitleKey?.split('.')) || '';\r\n            let cardSubtitle: string = Utils.getNestedObject(row, cardProps?.cardSubtitleKey?.split('.')) || '';\r\n            if (cardProps?.titleDateConversionOptions?.shouldConvertToLocaleString)\r\n                cardTitle = Utils.convertIsoToLocaleString(cardTitle, cardProps?.titleDateConversionOptions?.locales, cardProps?.titleDateConversionOptions?.formatOptions);\r\n            if (cardProps?.subtitleDateConversionOptions?.shouldConvertToLocaleString)\r\n                cardSubtitle = Utils.convertIsoToLocaleString(cardSubtitle, cardProps?.subtitleDateConversionOptions?.locales, cardProps?.subtitleDateConversionOptions?.formatOptions);\r\n            const rightCol = cardProps?.rightColumn;\r\n            const cIndicator = cardProps?.circleIndicator;\r\n            let titleValue = Utils.getNestedObject(row, cIndicator?.title?.split('.') as any) as string;\r\n            if (cIndicator?.dateConversionOptions?.shouldConvertToLocaleString)\r\n                titleValue = Utils.convertIsoToLocaleString(titleValue, cIndicator?.dateConversionOptions?.locales, cIndicator?.dateConversionOptions?.formatOptions);\r\n            const circleIndicator = {\r\n                ...cIndicator,\r\n                title: titleValue\r\n            };\r\n            const newCardProps: IInfoCardProps = {\r\n                ...cardProps,\r\n                cardTitle,\r\n                cardSubtitle,\r\n                cardRightColInformation: rightCol?.keys && {\r\n                    ...rightCol,\r\n                    values: rightCol?.keys?.map(opt => {\r\n                        let title: string = Utils.getNestedObject(row, opt?.title?.split('.') as any);\r\n                        if (opt?.dateConversionOptions?.shouldConvertToLocaleString)\r\n                            title = Utils.convertIsoToLocaleString(title, opt?.dateConversionOptions?.locales, opt?.dateConversionOptions?.formatOptions);\r\n                        return ({ title, style: opt?.style ?? { fontSize: 16, marginBottom: 4, fontWeight: 600 } });\r\n                    })\r\n                },\r\n                circleIndicator,\r\n                onClickDownButton: e => {\r\n                    onItemClick(row);\r\n                    if (cardProps?.onCardClick)\r\n                        cardProps?.onCardClick(e);\r\n                }\r\n            }\r\n            return (<Card key={row?.Id} {...newCardProps} />);\r\n        })\r\n    }, [Card, cardProps, actualRows, renderAs, onRenderCustomComponent]);\r\n\r\n    return CardsList;\r\n}","import * as React from 'react';\r\nimport { Utils } from '../../helpers/Utils';\r\nimport { useState, useEffect } from 'react';\r\nimport { useGridCardRendering } from './useGridCardRendering';\r\nimport {GridViewFilter} from '../handlers/GridViewFilter';\r\nimport {GridViewGrouping} from '../handlers/GridViewGrouping';\r\nimport type { IGridListProps, IRow, TColumn } from '../../models/interfaces/IGridView';\r\nimport type { IListOptionsProps } from '../../models/interfaces/IListOptions';\r\nimport type { IPanelFilterProps, SelectedItemsMap } from '../../models/interfaces/IPanelFilter';\r\nimport type { IGroupPanel } from '../../models/interfaces/IGroupPanel';\r\nimport type { IGroup } from '@fluentui/react/lib/DetailsList';\r\nimport type { KeyAndName } from '../../models/types/Common';\r\n\r\nexport function useGridController(props: IGridListProps<any>) {\r\n    const [renderAs, setRenderAs] = useState<typeof props.renderAs>(props?.renderAs || 'list');\r\n    const [shouldRenderCard, setShouldRenderCard] = useState(props?.renderAs === 'card');\r\n    const [cols, setCols] = useState(props?.columns);\r\n    const [groups, setGroups] = useState<IGroup[]>(undefined);\r\n    const [enableGrouping, setEnableGrouping] = useState(props?.headerOptions?.enableGrouping ?? false);\r\n    const [actualFilteredValues, setActualFilteredValues] = useState<SelectedItemsMap>(new Map());\r\n    const [selectedGroupKeys, setSelectedGroupKeys] = useState<KeyAndName>(null);\r\n    const [allRows, setAllRows] = useState(props?.rows);\r\n    const [actualRows, setActualRows] = useState(props?.rows ?? []);\r\n    const [isFilterPanelOpen, setIsFilterPanel] = useState(false);\r\n    const [isGroupPanelOpen, setIsGroupPanel] = useState(false);\r\n    const [fromDate, setFromDate] = useState<Date>(null);\r\n    const [toDate, setToDate] = useState(new Date());\r\n\r\n    useEffect(() => { setRenderAs(props?.renderAs); }, [props?.renderAs]);\r\n\r\n    const onItemClick = (item: IRow) => !!props?.onItemClick && props?.onItemClick(item);\r\n    const onColumnClick = (currentRows: IRow[]) => (_: any, column: TColumn<any>): void => {\r\n        if(!column) return;\r\n        let isSortedDescending = column?.isSortedDescending;\r\n        if (column?.isSorted) \r\n          isSortedDescending = !isSortedDescending;\r\n    \r\n        const sortedItems = Utils.copyAndSort(currentRows, column?.key, isSortedDescending);\r\n        setActualRows(sortedItems);\r\n        setCols(c => c.map(col => {\r\n            col.isSorted = col.key === column?.key;\r\n            if (col?.isSorted) \r\n              col.isSortedDescending = isSortedDescending;\r\n            return col;\r\n        }));\r\n    }\r\n\r\n    const CardsList = useGridCardRendering({\r\n        renderAs,\r\n        actualRows,\r\n        onItemClick,\r\n        cardProps: props?.cardProps,\r\n        enableGrouping,\r\n        onRenderCustomComponent: props?.onRenderCustomComponent,\r\n        setEnableGrouping,\r\n        setShouldRenderCard,\r\n        shouldRenderCard\r\n    });\r\n\r\n    useEffect(() => {\r\n        if(!props?.columns?.length) return;\r\n        const columns = props?.columns;\r\n        const convertedColumns = columns.map(c => {\r\n            if (c?.key?.includes('.') || c?.fieldName?.includes('.')) {\r\n                c.onRender = (item, _2) => {\r\n                    const fieldValue: string = Utils.getNestedObject(item, c?.fieldName?.split('.'));\r\n                    return <span>{fieldValue}</span>;\r\n                }\r\n                return c;\r\n            } else if (c?.dateConversionOptions?.shouldConvertToLocaleString) {\r\n                c.onRender = (item, _2) => {\r\n                    const fieldValue = Utils.convertIsoToLocaleString(item[c?.fieldName ?? c?.key], c?.dateConversionOptions?.locales, c?.dateConversionOptions?.formatOptions);\r\n                    return <span>{fieldValue}</span>;\r\n                }\r\n            }\r\n            return c;\r\n        });\r\n        setCols(convertedColumns);\r\n    }, [props?.columns]);\r\n\r\n    useEffect(() => { setActualRows(props?.rows); setAllRows(props?.rows) }, [props?.rows?.length]);\r\n\r\n    useEffect(() => {\r\n        setCols(columns => [...columns.map(c => ({...c, onColumnClick: onColumnClick(actualRows)}))]);\r\n    }, [actualRows?.length]);\r\n\r\n    const filterPanelConfig: IPanelFilterProps = {\r\n        isOpen: isFilterPanelOpen,\r\n        onApply: GridViewFilter.onApplyFilter({allRows, setActualRows, setIsFilterPanel}),\r\n        onCancel: () => { setIsFilterPanel(false); },\r\n        onClose: () =>  { setIsFilterPanel(false); },\r\n        availableFilters: GridViewFilter.buildFilters(allRows, cols, props?.hiddenFilterKeys as string[]),\r\n        panelTitle: props?.filterPanelTitle ?? 'Filtrar',\r\n        actualFilteredValues,\r\n        setActualFilteredValues,\r\n        fromDate, toDate, setFromDate, setToDate\r\n    }\r\n\r\n    const groupPanelConfig: IGroupPanel = {\r\n        isOpen: isGroupPanelOpen,\r\n        onCancel: () => { setIsGroupPanel(false); },\r\n        onClose: () =>  { setIsGroupPanel(false); },\r\n        onOpen: () => { setIsGroupPanel(true); },\r\n        panelTitle: props?.groupPanelTitle ?? 'Agrupar',\r\n        setSelectedGroupKeys,\r\n        selectedGroupKeys,\r\n        options: GridViewFilter.filterFromColumns(props?.hiddenGroupKeys as string[], cols)?.map(c => ({key: c?.key, text: c?.name})) ?? [],\r\n        onApply: GridViewGrouping.onApplyGrouping({\r\n            actualRows,\r\n            cols,\r\n            emptyGroupLabel: props?.emptyGroupLabel,\r\n            setIsGroupPanel,\r\n            setGroups,\r\n        })\r\n    }\r\n\r\n    const listConfig: IListOptionsProps = {\r\n        ...props?.headerOptions,\r\n        onSearchItem: GridViewFilter.onSearchItem({allRows, setActualRows}),\r\n        setRenderAs: () => renderAs === 'card' ? setRenderAs('list') : setRenderAs('card'),\r\n        setIsFilterPanelOpen: (value) => { setIsFilterPanel(value); },\r\n        setIsGroupPanelOpen: (value) => { setIsGroupPanel(value); },\r\n        enableSearch: props?.headerOptions?.enableSearch ?? true,\r\n        enableFilter: props?.headerOptions?.enableFilter ?? true,\r\n        enableCardView: props?.headerOptions?.enableCardView ?? false,\r\n        enableGrouping\r\n    }\r\n\r\n    return {\r\n        state: {\r\n            actualRows,\r\n            cols,\r\n            filterPanelConfig,\r\n            groupPanelConfig,\r\n            isFilterPanelOpen,\r\n            isGroupPanelOpen,\r\n            listConfig,\r\n            shouldRenderCard,\r\n            groups\r\n        },\r\n        handlers: {\r\n            onItemClick\r\n        },\r\n        JSX: { CardsList }\r\n    }\r\n}","import { lazy, useContext, useMemo, useRef, useEffect } from 'react';\r\nimport { FilterPanelContext } from '../Contexts';\r\nimport { RangeType } from '../../helpers/enums';\r\nimport type { FilterOption } from '../../models/interfaces/IPanelFilter';\r\nimport type { ITag } from '@fluentui/react/lib/Pickers';\r\nimport type { IPersonaProps } from '@fluentui/react/lib/Persona';\r\n\r\nexport function usePanelFilterController() {\r\n    const { isOpen, onClose, availableFilters, panelTitle, onCancel, onApply, actualFilteredValues, setActualFilteredValues, onOpen } = useContext(FilterPanelContext);\r\n    const [FluentPanel, Dropdown, PrimaryButton, DefaultButton, TagPicker] = useMemo(() => {\r\n        const Panel = lazy(() => import('@fluentui/react/lib/Panel').then(({ Panel }) => ({ default: Panel })));\r\n        const DropDown = lazy(() => import('@fluentui/react/lib/Dropdown').then(({ Dropdown }) => ({ default: Dropdown })));\r\n        const PrimaryButton = lazy(() => import('@fluentui/react/lib/Button').then(({ PrimaryButton }) => ({ default: PrimaryButton })));\r\n        const DefaultButton = lazy(() => import('@fluentui/react/lib/Button').then(({ DefaultButton }) => ({ default: DefaultButton })));\r\n        const TagPicker = lazy(() => import('@fluentui/react/lib/Pickers').then(({ TagPicker }) => ({ default: TagPicker })));\r\n        return [Panel, DropDown, PrimaryButton, DefaultButton, TagPicker];\r\n    }, []);\r\n    const lastAddedTag = useRef<FilterOption>(null);\r\n\r\n    const onAddOrRemoveToMap = (rootItemKey: string, option: FilterOption) => {\r\n        //If the current option is selected and is not already on the actualFilteredValues map, add it\r\n        //else if the current option is not select and all the other options are not select too, remove the key from the map\r\n        const copyMap = new Map(actualFilteredValues);\r\n        if (!option.key) return;\r\n        if (option.selected && !copyMap.has(option?.key as string)) {\r\n            copyMap.set(option.key as string, { rootItemKey, itemKey: option.key, data: option?.data, text: option?.text });\r\n        }\r\n        else if (!option.selected && copyMap.has(option?.key as string)) {\r\n            copyMap.delete(option?.key as string);\r\n        }\r\n        else if(option.selected && copyMap.has(option?.key as string) && option?.isDateComponent) {\r\n            copyMap.set(option.key as string, { rootItemKey, itemKey: option.key, data: option?.data, text: option?.text });\r\n        }\r\n        setActualFilteredValues(copyMap);\r\n    }\r\n\r\n    useEffect(() => { if (onOpen) onOpen(); }, []);\r\n\r\n    const mapOptions = (options: FilterOption[]) => {\r\n        return options\r\n        .filter(i => (i?.text !== null && i?.text !== undefined))\r\n        .map<FilterOption>(({ key, text, data }) => ({\r\n            key,\r\n            text,\r\n            data\r\n        }));\r\n    }\r\n\r\n    const listContainsTagList = (tag: FilterOption, tagList?: FilterOption[]) => {\r\n        if (!tagList || !tagList.length || tagList.length === 0)\r\n            return false;\r\n        return tagList.some(compareTag => compareTag?.key === tag?.key);\r\n    };\r\n\r\n    const getDefaultDropdownSelectedKeys = () => {\r\n        const selectedKeys: string[] = [];\r\n        actualFilteredValues.forEach((_, k) => {\r\n            selectedKeys.push(k);\r\n        })\r\n        return selectedKeys;\r\n    }\r\n\r\n    const getDefaultSelectedTag = (keyToFilter: string) => {\r\n        const selectedTags: FilterOption[] = [];\r\n        actualFilteredValues.forEach((d, k) => {\r\n            const keyKind = k?.split('_')[1];\r\n            if (keyKind === keyToFilter)\r\n                selectedTags.push({\r\n                    key: keyKind,\r\n                    text: d?.text,\r\n                    data: d?.data,\r\n                    selected: true,\r\n                    name: d?.text\r\n                });\r\n        })\r\n        return selectedTags as unknown as ITag[];\r\n    }\r\n\r\n    const getDefaultSelectedSlider = (keyToFilter: string): RangeType => {\r\n        const mapWithSameKey = [...actualFilteredValues]?.find(([key]) => key === keyToFilter);\r\n        const mapWithSameKeyValue = mapWithSameKey?.[1]?.data;\r\n        if(mapWithSameKeyValue) \r\n            return mapWithSameKeyValue?.type;\r\n        return RangeType.NONE;\r\n    }\r\n\r\n    const getDefaultSelectedPeople = (keyToFilter: string): IPersonaProps[] => {\r\n        const mapWithSameKey = [...actualFilteredValues]?.filter(([key]) => {\r\n            const keyKind = key?.split('_')[1];\r\n            return keyKind === keyToFilter\r\n        });\r\n        if(mapWithSameKey?.length > 0) {\r\n            const people = mapWithSameKey?.map(([_, value]) => value as IPersonaProps);\r\n            return people;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    const onChangeTags = (options: FilterOption[]) => (tags: ITag[]) => {\r\n        const copyMap = new Map(actualFilteredValues);\r\n        if(tags.length === 0) {\r\n            options.forEach(opt => {\r\n                if(copyMap.has(opt?.key as string))\r\n                    copyMap.delete(opt?.key as string);\r\n            });\r\n        } else if(!(tags?.map(i => i?.key).includes(lastAddedTag?.current?.key))) {\r\n            copyMap.delete(lastAddedTag?.current?.key as string);\r\n            lastAddedTag.current = null; \r\n        }\r\n        setActualFilteredValues(copyMap);\r\n    }\r\n\r\n    const onTagSelected = (key: string) =>(selectedItem: ITag) => {\r\n        onAddOrRemoveToMap(key, {...selectedItem, selected: true} as unknown as FilterOption);\r\n        lastAddedTag.current = selectedItem as unknown as FilterOption;\r\n        return selectedItem;\r\n    }\r\n\r\n    const onResolveTagSuggestion = (options: FilterOption[]) => (currentFilter: string, tagList: ITag[], ) => {\r\n        const result = currentFilter\r\n        ? options.filter(opt => \r\n            opt?.text?.toLowerCase().indexOf(currentFilter.toLowerCase()) === 0 \r\n            && !listContainsTagList(opt, tagList as unknown as FilterOption[])).map(f => ({...f, name: f?.text})): [];\r\n        return result;\r\n    }\r\n\r\n    const onRecordDateChange = (key: string) => (from: Date, to: Date, type: RangeType) => {\r\n        if(from && to && type !== RangeType.NONE)\r\n            onAddOrRemoveToMap(key, {\r\n                key: key,\r\n                text: `${from?.toISOString()} - ${to?.toISOString()}`,\r\n                data: { from, to, type },\r\n                selected: true,\r\n                isDateComponent: true,\r\n                name: `${from?.toISOString()} - ${to?.toISOString()}`\r\n            } as unknown as FilterOption);\r\n        else {\r\n            const copyMap = new Map(actualFilteredValues);\r\n            copyMap.delete(key);\r\n            setActualFilteredValues(copyMap);\r\n        }\r\n    }\r\n\r\n    const onChangePeople = (key: string) => (items: IPersonaProps[]) => {\r\n        const copyMap = new Map(actualFilteredValues);\r\n        if(items.length === 0) {\r\n            actualFilteredValues?.forEach((_, k) => {\r\n                if(k?.split('_')?.[1] === key)\r\n                    copyMap.delete(k);\r\n            });\r\n            setActualFilteredValues(copyMap);\r\n        } \r\n        else {\r\n            items.forEach(i => {\r\n                onAddOrRemoveToMap(key, {\r\n                    key: i?.key,\r\n                    text: i?.text,\r\n                    data: i?.['data'],\r\n                    selected: true,\r\n                    isDateComponent: false,\r\n                    name: i?.text\r\n                } as unknown as FilterOption);\r\n            });\r\n        }\r\n    }\r\n\r\n    return {\r\n        state: {\r\n            isOpen,\r\n            actualFilteredValues,\r\n            panelTitle,\r\n            availableFilters\r\n        },\r\n        handlers: {\r\n            getDefaultDropdownSelectedKeys,\r\n            getDefaultSelectedTag,\r\n            getDefaultSelectedSlider,\r\n            getDefaultSelectedPeople,\r\n            onAddOrRemoveToMap,\r\n            onClose,\r\n            onCancel,\r\n            onApply,\r\n            onOpen,\r\n            setActualFilteredValues,\r\n            onChangeTags,\r\n            onTagSelected,\r\n            onResolveTagSuggestion,\r\n            onRecordDateChange,\r\n            mapOptions,\r\n            onChangePeople\r\n        },\r\n        JSX: {\r\n            FluentPanel,\r\n            Dropdown,\r\n            PrimaryButton,\r\n            DefaultButton,\r\n            TagPicker\r\n        }\r\n    }\r\n}","export {GridView} from './GridView';","\r\nexport class Utils {\r\n\r\n    /**Tries to convert an ISO `string` to the locale format. */\r\n    public static convertIsoToLocaleString(date: string, locales: string | string[] = 'pt-BR', formatOptions: Intl.DateTimeFormatOptions = undefined): string {\r\n        //First check if the string can be converted to a date object.\r\n        if(!(new Date(date) instanceof Date) && isNaN(new Date(date)?.getTime()))\r\n            return date;\r\n        const isIsoDate = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z/.test(date);\r\n        if (!isIsoDate)\r\n            return date;\r\n        return new Intl.DateTimeFormat(locales, formatOptions).format(new Date(date));\r\n    }\r\n\r\n    public static copyAndSort<T>(items: T[], columnKey: string, isSortedDescending?: boolean): T[] {\r\n        return items.slice(0).sort((a: T, b: T) => {\r\n            const aValue = Utils.getNestedObject(a, columnKey?.split('.'));\r\n            const bValue = Utils.getNestedObject(b, columnKey?.split('.'));\r\n            return ((isSortedDescending ? aValue < bValue : aValue > bValue) ? 1 : -1);\r\n        });\r\n    }\r\n\r\n    /**Get a value from a deep nested object.\r\n     * \r\n     * @param obj The object to search in.\r\n     * @param path The path to the value, as an array of keys, separated by dots.\r\n     * @returns The value, if found.\r\n     * \r\n     * Theoretically, this function can be used to get the value from an `number[]` as the type of the `pathArr`, but I've not tested it.\r\n     */\r\n    public static getNestedObject<Path, ReturnV extends any, Obj extends Record<any, any>>(nestedObj: Obj, pathArr: Path[]): ReturnV {\r\n        return pathArr?.reduce((obj, key) => (obj && obj[key] !== 'undefined') ? obj[key] : undefined, nestedObj) as ReturnV;\r\n    }\r\n\r\n    public static getDeepKeys(obj: Record<any, any>): string[] {\r\n        let keys: string[] = [];\r\n        for(let key in obj) {\r\n            keys.push(key);\r\n            if(typeof obj[key] === \"object\") {\r\n                let subKeys = Utils.getDeepKeys(obj[key]);\r\n                keys = keys.concat(subKeys?.map(subkey => {\r\n                    return key + \".\" + subkey;\r\n                }));\r\n            }\r\n        }\r\n        return keys;\r\n    }\r\n}","\r\nexport enum RangeType {\r\n    NONE,\r\n    WEEK,\r\n    MONTH,\r\n    YEAR,\r\n    CUSTOM\r\n}","module.exports = require(\"@fluentui/react\");","module.exports = require(\"@fluentui/react/lib/Button\");","module.exports = require(\"@fluentui/react/lib/ChoiceGroup\");","module.exports = require(\"@fluentui/react/lib/DatePicker\");","module.exports = require(\"@fluentui/react/lib/DetailsList\");","module.exports = require(\"@fluentui/react/lib/Dropdown\");","module.exports = require(\"@fluentui/react/lib/Panel\");","module.exports = require(\"@fluentui/react/lib/Pickers\");","module.exports = require(\"@fluentui/react/lib/Slider\");","module.exports = require(\"@fluentui/react/lib/Sticky\");","module.exports = require(\"react\");"],"sourceRoot":""}