import './style.css';
import u, { useRef as f, useMemo as b, useEffect as a } from "react";
const h = "_tooltipContentContainer_l740i_1", _ = "_tooltipWrapper_l740i_35", m = {
  tooltipContentContainer: h,
  tooltipWrapper: _
}, C = (e) => {
  const o = f(null), i = f(null), c = b(() => (e == null ? void 0 : e.enableParentOverflow) === null || e.enableParentOverflow === void 0 ? !1 : e == null ? void 0 : e.enableParentOverflow, [e == null ? void 0 : e.enableParentOverflow]);
  a(() => {
    var n, r;
    if (!(o.current && i.current))
      return;
    const t = (n = o == null ? void 0 : o.current) == null ? void 0 : n.getBoundingClientRect().width, l = (r = i == null ? void 0 : i.current) == null ? void 0 : r.getBoundingClientRect().width;
    P(`${Math.floor(t)}px`, `${Math.floor(l)}px`);
  }, [o, i, e.direction]), a(() => {
    if (!e.direction)
      return;
    const t = document.documentElement;
    switch (e.direction) {
      case "top_center":
      case "top_left":
      case "top_right": {
        t.style.setProperty("--tooltip-container-bottom", "100%"), t.style.setProperty("--tooltip-container-margin-bottom", "12px"), t.style.setProperty("--tooltip-container-top", "unset"), t.style.setProperty("--tooltip-container-right", "unset"), t.style.setProperty("--tooltip-container-margin-top", "unset"), t.style.setProperty("--tooltip-container-margin-left", "unset"), t.style.setProperty("--tooltip-container-margin-right", "unset"), t.style.setProperty("--tooltip-container-after-top", "100%"), t.style.setProperty("--tooltip-container-after-transform", "rotate(180deg)"), t.style.setProperty("--tooltip-container-after-bottom", "unset"), t.style.setProperty("--tooltip-container-after-right", "unset");
        break;
      }
      case "bottom_left":
      case "bottom_center":
      case "bottom_right": {
        t.style.setProperty("--tooltip-container-top", "100%"), t.style.setProperty("--tooltip-container-margin-top", "12px"), t.style.setProperty("--tooltip-container-margin-left", "unset"), t.style.setProperty("--tooltip-container-margin-right", "unset"), t.style.setProperty("--tooltip-container-bottom", "unset"), t.style.setProperty("--tooltip-container-right", "unset"), t.style.setProperty("--tooltip-container-after-bottom", "100%"), t.style.setProperty("--tooltip-container-after-top", "unset"), t.style.setProperty("--tooltip-container-after-right", "unset"), t.style.setProperty("--tooltip-container-after-transform", "unset");
        break;
      }
      case "right": {
        t.style.setProperty("--tooltip-container-top", "-5px"), t.style.setProperty("--tooltip-container-margin-left", "12px"), t.style.setProperty("--tooltip-container-margin-right", "unset"), t.style.setProperty("--tooltip-container-margin-top", "unset"), t.style.setProperty("--tooltip-container-right", "unset"), t.style.setProperty("--tooltip-container-bottom", "unset"), t.style.setProperty("--tooltip-container-after-top", "45%"), t.style.setProperty("--tooltip-container-after-right", "100%"), t.style.setProperty("--tooltip-container-after-transform", "rotate(270deg)"), t.style.setProperty("--tooltip-container-after-bottom", "unset");
        break;
      }
      case "left": {
        t.style.setProperty("--tooltip-container-right", "105%"), t.style.setProperty("--tooltip-container-margin-right", "12px"), t.style.setProperty("--tooltip-container-top", "-5px"), t.style.setProperty("--tooltip-container-margin-left", "unset"), t.style.setProperty("--tooltip-container-margin-top", "unset"), t.style.setProperty("--tooltip-container-margin-bottom", "unset"), t.style.setProperty("--tooltip-container-bottom", "unset"), t.style.setProperty("--tooltip-container-after-top", "45%"), t.style.setProperty("--tooltip-container-after-transform", "rotate(90deg)"), t.style.setProperty("--tooltip-container-after-bottom", "unset"), t.style.setProperty("--tooltip-container-after-right", "unset");
        break;
      }
    }
  }, [e.direction]), a(() => {
    var t;
    c || !((t = o == null ? void 0 : o.current) != null && t.parentElement) || (o.current.parentElement.style.overflow = "unset");
  }, [o, c]);
  const P = (t, l) => {
    var p;
    const n = (s) => `calc(${s})`, r = (s, g) => {
      y.style.setProperty("--tooltip-container-left", s), y.style.setProperty("--tooltip-container-after-left", g);
    }, y = document.documentElement;
    (p = (/* @__PURE__ */ new Map([
      ["bottom_right", () => r(n(`${t} - ${l}`), "70%")],
      ["bottom_center", () => r(n(`${t} / 2 - ${l} / 2`), "50%")],
      ["bottom_left", () => r("0px", "20%")],
      ["left", () => r("unset", "100%")],
      ["right", () => r("100%", "unset")],
      ["top_right", () => r(n(`${t} - ${l}`), "70%")],
      ["top_center", () => r(n(`${t} / 2 - ${l} / 2`), "50%")],
      ["top_left", () => r("0px", "20%")]
    ])).get(e.direction)) == null || p.call(null);
  };
  return /* @__PURE__ */ u.createElement("div", {
    ref: o,
    className: m.tooltipWrapper
  }, e.children, /* @__PURE__ */ u.createElement("div", {
    ref: i,
    className: m.tooltipContentContainer
  }, e.content));
};
export {
  C as Tooltip
};
