import {
  __commonJS
} from "./chunk-S5KM4IGW.js";

// node_modules/uuid-browser/lib/rng-browser.js
var require_rng_browser = __commonJS({
  "node_modules/uuid-browser/lib/rng-browser.js"(exports, module) {
    var rng;
    var crypto = typeof global !== "undefined" && (global.crypto || global.msCrypto);
    if (crypto && crypto.getRandomValues) {
      rnds8 = new Uint8Array(16);
      rng = function whatwgRNG() {
        crypto.getRandomValues(rnds8);
        return rnds8;
      };
    }
    var rnds8;
    if (!rng) {
      rnds = new Array(16);
      rng = function() {
        for (var i = 0, r; i < 16; i++) {
          if ((i & 3) === 0)
            r = Math.random() * 4294967296;
          rnds[i] = r >>> ((i & 3) << 3) & 255;
        }
        return rnds;
      };
    }
    var rnds;
    module.exports = rng;
  }
});

// node_modules/uuid-browser/lib/bytesToUuid.js
var require_bytesToUuid = __commonJS({
  "node_modules/uuid-browser/lib/bytesToUuid.js"(exports, module) {
    var byteToHex = [];
    for (i = 0; i < 256; ++i) {
      byteToHex[i] = (i + 256).toString(16).substr(1);
    }
    var i;
    function bytesToUuid(buf, offset) {
      var i2 = offset || 0;
      var bth = byteToHex;
      return bth[buf[i2++]] + bth[buf[i2++]] + bth[buf[i2++]] + bth[buf[i2++]] + "-" + bth[buf[i2++]] + bth[buf[i2++]] + "-" + bth[buf[i2++]] + bth[buf[i2++]] + "-" + bth[buf[i2++]] + bth[buf[i2++]] + "-" + bth[buf[i2++]] + bth[buf[i2++]] + bth[buf[i2++]] + bth[buf[i2++]] + bth[buf[i2++]] + bth[buf[i2++]];
    }
    module.exports = bytesToUuid;
  }
});

// node_modules/uuid-browser/v4.js
var require_v4 = __commonJS({
  "node_modules/uuid-browser/v4.js"(exports, module) {
    var rng = require_rng_browser();
    var bytesToUuid = require_bytesToUuid();
    function v4(options, buf, offset) {
      var i = buf && offset || 0;
      if (typeof options == "string") {
        buf = options == "binary" ? new Array(16) : null;
        options = null;
      }
      options = options || {};
      var rnds = options.random || (options.rng || rng)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        for (var ii = 0; ii < 16; ++ii) {
          buf[i + ii] = rnds[ii];
        }
      }
      return buf || bytesToUuid(rnds);
    }
    module.exports = v4;
  }
});

export {
  require_v4
};
//# sourceMappingURL=chunk-CVEFTW7B.js.map
