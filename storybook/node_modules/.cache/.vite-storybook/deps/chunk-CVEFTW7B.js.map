{
  "version": 3,
  "sources": ["../../../uuid-browser/lib/rng-browser.js", "../../../uuid-browser/lib/bytesToUuid.js", "../../../uuid-browser/v4.js"],
  "sourcesContent": ["// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\nvar rng;\n\nvar crypto = typeof global !== 'undefined' && (global.crypto || global.msCrypto); // for IE 11\nif (crypto && crypto.getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n  rng = function whatwgRNG() {\n    crypto.getRandomValues(rnds8);\n    return rnds8;\n  };\n}\n\nif (!rng) {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n  rng = function() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n\nmodule.exports = rng;\n", "/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  return bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\nmodule.exports = bytesToUuid;\n", "var rng = require('./lib/rng-browser');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options == 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n"],
  "mappings": ";;;;;AAAA;AAAA;AAIA,QAAI;AAEJ,QAAI,SAAS,OAAO,WAAW,gBAAgB,OAAO,UAAU,OAAO;AACvE,QAAI,UAAU,OAAO,iBAAiB;AAEhC,cAAQ,IAAI,WAAW,EAAE;AAC7B,YAAM,SAAS,YAAY;AACzB,eAAO,gBAAgB,KAAK;AAC5B,eAAO;AAAA,MACT;AAAA,IACF;AALM;AAON,QAAI,CAAC,KAAK;AAKJ,aAAO,IAAI,MAAM,EAAE;AACvB,YAAM,WAAW;AACf,iBAAS,IAAI,GAAG,GAAG,IAAI,IAAI,KAAK;AAC9B,eAAK,IAAI,OAAU;AAAG,gBAAI,KAAK,OAAO,IAAI;AAC1C,eAAK,KAAK,QAAQ,IAAI,MAAS,KAAK;AAAA,QACtC;AAEA,eAAO;AAAA,MACT;AAAA,IACF;AATM;AAWN,WAAO,UAAU;AAAA;AAAA;;;AChCjB;AAAA;AAIA,QAAI,YAAY,CAAC;AACjB,SAAS,IAAI,GAAG,IAAI,KAAK,EAAE,GAAG;AAC5B,gBAAU,MAAM,IAAI,KAAO,SAAS,EAAE,EAAE,OAAO,CAAC;AAAA,IAClD;AAFS;AAIT,aAAS,YAAY,KAAK,QAAQ;AAChC,UAAIA,KAAI,UAAU;AAClB,UAAI,MAAM;AACV,aAAO,IAAI,IAAIA,SAAQ,IAAI,IAAIA,SACvB,IAAI,IAAIA,SAAQ,IAAI,IAAIA,SAAQ,MAChC,IAAI,IAAIA,SAAQ,IAAI,IAAIA,SAAQ,MAChC,IAAI,IAAIA,SAAQ,IAAI,IAAIA,SAAQ,MAChC,IAAI,IAAIA,SAAQ,IAAI,IAAIA,SAAQ,MAChC,IAAI,IAAIA,SAAQ,IAAI,IAAIA,SACxB,IAAI,IAAIA,SAAQ,IAAI,IAAIA,SACxB,IAAI,IAAIA,SAAQ,IAAI,IAAIA;AAAA,IAClC;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACtBjB;AAAA;AAAA,QAAI,MAAM;AACV,QAAI,cAAc;AAElB,aAAS,GAAG,SAAS,KAAK,QAAQ;AAChC,UAAI,IAAI,OAAO,UAAU;AAEzB,UAAI,OAAO,WAAY,UAAU;AAC/B,cAAM,WAAW,WAAW,IAAI,MAAM,EAAE,IAAI;AAC5C,kBAAU;AAAA,MACZ;AACA,gBAAU,WAAW,CAAC;AAEtB,UAAI,OAAO,QAAQ,WAAW,QAAQ,OAAO,KAAK;AAGlD,WAAK,KAAM,KAAK,KAAK,KAAQ;AAC7B,WAAK,KAAM,KAAK,KAAK,KAAQ;AAG7B,UAAI,KAAK;AACP,iBAAS,KAAK,GAAG,KAAK,IAAI,EAAE,IAAI;AAC9B,cAAI,IAAI,MAAM,KAAK;AAAA,QACrB;AAAA,MACF;AAEA,aAAO,OAAO,YAAY,IAAI;AAAA,IAChC;AAEA,WAAO,UAAU;AAAA;AAAA;",
  "names": ["i"]
}
