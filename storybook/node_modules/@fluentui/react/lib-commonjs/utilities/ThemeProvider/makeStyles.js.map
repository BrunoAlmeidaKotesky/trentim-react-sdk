{"version":3,"file":"makeStyles.js","sourceRoot":"../src/","sources":["utilities/ThemeProvider/makeStyles.ts"],"names":[],"mappings":";;;AAAA,uCAAsC;AACtC,yEAA4D;AAC5D,4EAA2E;AAI3E,IAAM,QAAQ,GAAG,UAAC,SAAwB,EAAE,IAAW;IACrD,KAAkB,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI,EAAE;QAAnB,IAAM,GAAG,aAAA;QACZ,SAAS,GAAG,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAE/B,IAAI,CAAC,SAAS,EAAE;YACd,OAAO;SACR;KACF;IAED,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAEF,IAAM,QAAQ,GAAG,UAAC,SAAwB,EAAE,IAAW,EAAE,KAAU;IACjE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QACxC,IAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAEpB,IAAI,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEjC,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;YAEpB,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;SAC7B;QAED,SAAS,GAAG,OAAO,CAAC;KACrB;IAED,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;AAC9C,CAAC,CAAC;AAUF;;;;;;;;GAQG;AACH,SAAgB,UAAU,CACxB,eAA0D;IAG1D,2CAA2C;IAC3C,IAAM,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;IAExB,mDAAmD;IACnD,OAAO,UAAC,OAA8B;QAA9B,wBAAA,EAAA,YAA8B;QAC9B,IAAA,KAAK,GAAK,OAAO,MAAZ,CAAa;QACxB,IAAM,GAAG,GAAG,iCAAS,EAAE,CAAC;QACxB,IAAM,eAAe,GAAG,mBAAQ,EAAE,CAAC;QAEnC,KAAK,GAAG,KAAK,IAAI,eAAe,CAAC;QACjC,IAAM,QAAQ,GAAG,yCAAmB,CAAC;QAErC,IAAM,EAAE,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC;QAC5B,IAAM,eAAe,GAAG,OAAO,eAAe,KAAK,UAAU,CAAC;QAC9D,IAAM,IAAI,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;QAC5D,IAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAElC,IAAI,CAAC,KAAK,EAAE;YACV,IAAM,MAAM,GAAG,eAAe,CAAC,CAAC,CAAE,eAA+C,CAAC,KAAM,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC;YAE5G,KAAK,GAAG,yCAAmB,CAAC,YAAY,CAAC,MAAM,EAAE,EAAE,YAAY,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,KAAM,CAAC,GAAG,EAAE,CAAC,CAAC;YAC3F,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;SAC9B;QAED,OAAO,KAAK,CAAC;IACf,CAAC,CAAC;AACJ,CAAC;AA9BD,gCA8BC","sourcesContent":["import { useTheme } from './useTheme';\nimport { useWindow } from '@fluentui/react-window-provider';\nimport { mergeStylesRenderer } from './styleRenderers/mergeStylesRenderer';\nimport type { IStyle } from '@fluentui/style-utilities';\nimport type { Theme } from '@fluentui/theme';\n\nconst graphGet = (graphNode: Map<any, any>, path: any[]): any | undefined => {\n  for (const key of path) {\n    graphNode = graphNode.get(key);\n\n    if (!graphNode) {\n      return;\n    }\n  }\n\n  return graphNode;\n};\n\nconst graphSet = (graphNode: Map<any, any>, path: any[], value: any) => {\n  for (let i = 0; i < path.length - 1; i++) {\n    const key = path[i];\n\n    let current = graphNode.get(key);\n\n    if (!current) {\n      current = new Map();\n\n      graphNode.set(key, current);\n    }\n\n    graphNode = current;\n  }\n\n  graphNode.set(path[path.length - 1], value);\n};\n\n/**\n * Options that can be provided to the hook generated by `makeStyles`.\n * @deprecated Only used in deprecated `makeStyles` implementation below.\n */\nexport type UseStylesOptions = {\n  theme?: Theme;\n};\n\n/**\n * Registers a css object, optionally as a function of the theme.\n *\n * @param styleOrFunction - Either a css javascript object, or a function which takes in `ITheme`\n * and returns a css javascript object.\n *\n * @deprecated Use `mergeStyles` instead for v8 related code. We will be using a new implementation of `makeStyles` in\n * future versions of the library.\n */\nexport function makeStyles<TStyleSet extends { [key in keyof TStyleSet]: IStyle } = { [key: string]: IStyle }>(\n  styleOrFunction: TStyleSet | ((theme: Theme) => TStyleSet),\n  // eslint-disable-next-line deprecation/deprecation\n): (options?: UseStylesOptions) => { [key in keyof TStyleSet]: string } {\n  // Create graph of inputs to map to output.\n  const graph = new Map();\n\n  // eslint-disable-next-line deprecation/deprecation\n  return (options: UseStylesOptions = {}) => {\n    let { theme } = options;\n    const win = useWindow();\n    const contextualTheme = useTheme();\n\n    theme = theme || contextualTheme;\n    const renderer = mergeStylesRenderer;\n\n    const id = renderer.getId();\n    const isStyleFunction = typeof styleOrFunction === 'function';\n    const path = isStyleFunction ? [id, win, theme] : [id, win];\n    let value = graphGet(graph, path);\n\n    if (!value) {\n      const styles = isStyleFunction ? (styleOrFunction as (theme: Theme) => TStyleSet)(theme!) : styleOrFunction;\n\n      value = mergeStylesRenderer.renderStyles(styles, { targetWindow: win, rtl: !!theme!.rtl });\n      graphSet(graph, path, value);\n    }\n\n    return value;\n  };\n}\n"]}