"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PropsTable = void 0;

var _react = _interopRequireDefault(require("react"));

var _addons = _interopRequireDefault(require("@storybook/addons"));

var _coreEvents = require("@storybook/core-events");

var _Story = _interopRequireDefault(require("./Components/Story"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var PropsTable = function PropsTable(props) {
  var _React$useState = _react["default"].useState(null),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      data = _React$useState2[0],
      dataSet = _React$useState2[1];

  _react["default"].useEffect(function () {
    var channel = props.channel,
        api = props.api; // Listen to the PropsTable and render it.

    channel.on('storybook/PropsTable/add_PropsTable', dataSet); // Clear the current PropsTable on every story change.

    api.on(_coreEvents.STORY_CHANGED, dataSet);
    return function () {
      var channel = props.channel,
          api = props.api;
      api.off(_coreEvents.STORY_CHANGED, dataSet);
      channel.removeListener('storybook/PropsTable/add_PropsTable', dataSet);
    };
  }, [dataSet]);

  var active = props.active,
      legacy = props.legacy;

  if (legacy) {
    // eslint-disable-next-line react/jsx-no-useless-fragment
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, legacy);
  }

  return active && data && typeof data !== 'string' ? /*#__PURE__*/_react["default"].createElement("div", {
    style: {
      padding: 10,
      boxSizing: 'border-box',
      width: '100%'
    },
    className: "addon-PropsTable-container"
  }, /*#__PURE__*/_react["default"].createElement(_Story["default"], data)) : null;
};

exports.PropsTable = PropsTable;
PropsTable.defaultProps = {
  legacy: ''
};

_addons["default"].register('storybook/props', function (api) {
  var channel = _addons["default"].getChannel();

  _addons["default"].addPanel('storybook/props/panel', {
    title: 'Props',
    render: function render(_ref) {
      var active = _ref.active;
      return /*#__PURE__*/_react["default"].createElement(PropsTable, {
        key: "storybook-addon-react-docgen",
        channel: channel,
        api: api,
        active: active
      });
    }
  });
});