{
  "version": 3,
  "sources": ["../../../acorn-jsx/xhtml.js", "../../../acorn-jsx/index.js"],
  "sourcesContent": ["module.exports = {\n  quot: '\\u0022',\n  amp: '&',\n  apos: '\\u0027',\n  lt: '<',\n  gt: '>',\n  nbsp: '\\u00A0',\n  iexcl: '\\u00A1',\n  cent: '\\u00A2',\n  pound: '\\u00A3',\n  curren: '\\u00A4',\n  yen: '\\u00A5',\n  brvbar: '\\u00A6',\n  sect: '\\u00A7',\n  uml: '\\u00A8',\n  copy: '\\u00A9',\n  ordf: '\\u00AA',\n  laquo: '\\u00AB',\n  not: '\\u00AC',\n  shy: '\\u00AD',\n  reg: '\\u00AE',\n  macr: '\\u00AF',\n  deg: '\\u00B0',\n  plusmn: '\\u00B1',\n  sup2: '\\u00B2',\n  sup3: '\\u00B3',\n  acute: '\\u00B4',\n  micro: '\\u00B5',\n  para: '\\u00B6',\n  middot: '\\u00B7',\n  cedil: '\\u00B8',\n  sup1: '\\u00B9',\n  ordm: '\\u00BA',\n  raquo: '\\u00BB',\n  frac14: '\\u00BC',\n  frac12: '\\u00BD',\n  frac34: '\\u00BE',\n  iquest: '\\u00BF',\n  Agrave: '\\u00C0',\n  Aacute: '\\u00C1',\n  Acirc: '\\u00C2',\n  Atilde: '\\u00C3',\n  Auml: '\\u00C4',\n  Aring: '\\u00C5',\n  AElig: '\\u00C6',\n  Ccedil: '\\u00C7',\n  Egrave: '\\u00C8',\n  Eacute: '\\u00C9',\n  Ecirc: '\\u00CA',\n  Euml: '\\u00CB',\n  Igrave: '\\u00CC',\n  Iacute: '\\u00CD',\n  Icirc: '\\u00CE',\n  Iuml: '\\u00CF',\n  ETH: '\\u00D0',\n  Ntilde: '\\u00D1',\n  Ograve: '\\u00D2',\n  Oacute: '\\u00D3',\n  Ocirc: '\\u00D4',\n  Otilde: '\\u00D5',\n  Ouml: '\\u00D6',\n  times: '\\u00D7',\n  Oslash: '\\u00D8',\n  Ugrave: '\\u00D9',\n  Uacute: '\\u00DA',\n  Ucirc: '\\u00DB',\n  Uuml: '\\u00DC',\n  Yacute: '\\u00DD',\n  THORN: '\\u00DE',\n  szlig: '\\u00DF',\n  agrave: '\\u00E0',\n  aacute: '\\u00E1',\n  acirc: '\\u00E2',\n  atilde: '\\u00E3',\n  auml: '\\u00E4',\n  aring: '\\u00E5',\n  aelig: '\\u00E6',\n  ccedil: '\\u00E7',\n  egrave: '\\u00E8',\n  eacute: '\\u00E9',\n  ecirc: '\\u00EA',\n  euml: '\\u00EB',\n  igrave: '\\u00EC',\n  iacute: '\\u00ED',\n  icirc: '\\u00EE',\n  iuml: '\\u00EF',\n  eth: '\\u00F0',\n  ntilde: '\\u00F1',\n  ograve: '\\u00F2',\n  oacute: '\\u00F3',\n  ocirc: '\\u00F4',\n  otilde: '\\u00F5',\n  ouml: '\\u00F6',\n  divide: '\\u00F7',\n  oslash: '\\u00F8',\n  ugrave: '\\u00F9',\n  uacute: '\\u00FA',\n  ucirc: '\\u00FB',\n  uuml: '\\u00FC',\n  yacute: '\\u00FD',\n  thorn: '\\u00FE',\n  yuml: '\\u00FF',\n  OElig: '\\u0152',\n  oelig: '\\u0153',\n  Scaron: '\\u0160',\n  scaron: '\\u0161',\n  Yuml: '\\u0178',\n  fnof: '\\u0192',\n  circ: '\\u02C6',\n  tilde: '\\u02DC',\n  Alpha: '\\u0391',\n  Beta: '\\u0392',\n  Gamma: '\\u0393',\n  Delta: '\\u0394',\n  Epsilon: '\\u0395',\n  Zeta: '\\u0396',\n  Eta: '\\u0397',\n  Theta: '\\u0398',\n  Iota: '\\u0399',\n  Kappa: '\\u039A',\n  Lambda: '\\u039B',\n  Mu: '\\u039C',\n  Nu: '\\u039D',\n  Xi: '\\u039E',\n  Omicron: '\\u039F',\n  Pi: '\\u03A0',\n  Rho: '\\u03A1',\n  Sigma: '\\u03A3',\n  Tau: '\\u03A4',\n  Upsilon: '\\u03A5',\n  Phi: '\\u03A6',\n  Chi: '\\u03A7',\n  Psi: '\\u03A8',\n  Omega: '\\u03A9',\n  alpha: '\\u03B1',\n  beta: '\\u03B2',\n  gamma: '\\u03B3',\n  delta: '\\u03B4',\n  epsilon: '\\u03B5',\n  zeta: '\\u03B6',\n  eta: '\\u03B7',\n  theta: '\\u03B8',\n  iota: '\\u03B9',\n  kappa: '\\u03BA',\n  lambda: '\\u03BB',\n  mu: '\\u03BC',\n  nu: '\\u03BD',\n  xi: '\\u03BE',\n  omicron: '\\u03BF',\n  pi: '\\u03C0',\n  rho: '\\u03C1',\n  sigmaf: '\\u03C2',\n  sigma: '\\u03C3',\n  tau: '\\u03C4',\n  upsilon: '\\u03C5',\n  phi: '\\u03C6',\n  chi: '\\u03C7',\n  psi: '\\u03C8',\n  omega: '\\u03C9',\n  thetasym: '\\u03D1',\n  upsih: '\\u03D2',\n  piv: '\\u03D6',\n  ensp: '\\u2002',\n  emsp: '\\u2003',\n  thinsp: '\\u2009',\n  zwnj: '\\u200C',\n  zwj: '\\u200D',\n  lrm: '\\u200E',\n  rlm: '\\u200F',\n  ndash: '\\u2013',\n  mdash: '\\u2014',\n  lsquo: '\\u2018',\n  rsquo: '\\u2019',\n  sbquo: '\\u201A',\n  ldquo: '\\u201C',\n  rdquo: '\\u201D',\n  bdquo: '\\u201E',\n  dagger: '\\u2020',\n  Dagger: '\\u2021',\n  bull: '\\u2022',\n  hellip: '\\u2026',\n  permil: '\\u2030',\n  prime: '\\u2032',\n  Prime: '\\u2033',\n  lsaquo: '\\u2039',\n  rsaquo: '\\u203A',\n  oline: '\\u203E',\n  frasl: '\\u2044',\n  euro: '\\u20AC',\n  image: '\\u2111',\n  weierp: '\\u2118',\n  real: '\\u211C',\n  trade: '\\u2122',\n  alefsym: '\\u2135',\n  larr: '\\u2190',\n  uarr: '\\u2191',\n  rarr: '\\u2192',\n  darr: '\\u2193',\n  harr: '\\u2194',\n  crarr: '\\u21B5',\n  lArr: '\\u21D0',\n  uArr: '\\u21D1',\n  rArr: '\\u21D2',\n  dArr: '\\u21D3',\n  hArr: '\\u21D4',\n  forall: '\\u2200',\n  part: '\\u2202',\n  exist: '\\u2203',\n  empty: '\\u2205',\n  nabla: '\\u2207',\n  isin: '\\u2208',\n  notin: '\\u2209',\n  ni: '\\u220B',\n  prod: '\\u220F',\n  sum: '\\u2211',\n  minus: '\\u2212',\n  lowast: '\\u2217',\n  radic: '\\u221A',\n  prop: '\\u221D',\n  infin: '\\u221E',\n  ang: '\\u2220',\n  and: '\\u2227',\n  or: '\\u2228',\n  cap: '\\u2229',\n  cup: '\\u222A',\n  'int': '\\u222B',\n  there4: '\\u2234',\n  sim: '\\u223C',\n  cong: '\\u2245',\n  asymp: '\\u2248',\n  ne: '\\u2260',\n  equiv: '\\u2261',\n  le: '\\u2264',\n  ge: '\\u2265',\n  sub: '\\u2282',\n  sup: '\\u2283',\n  nsub: '\\u2284',\n  sube: '\\u2286',\n  supe: '\\u2287',\n  oplus: '\\u2295',\n  otimes: '\\u2297',\n  perp: '\\u22A5',\n  sdot: '\\u22C5',\n  lceil: '\\u2308',\n  rceil: '\\u2309',\n  lfloor: '\\u230A',\n  rfloor: '\\u230B',\n  lang: '\\u2329',\n  rang: '\\u232A',\n  loz: '\\u25CA',\n  spades: '\\u2660',\n  clubs: '\\u2663',\n  hearts: '\\u2665',\n  diams: '\\u2666'\n};\n", "'use strict';\n\nconst XHTMLEntities = require('./xhtml');\n\nconst hexNumber = /^[\\da-fA-F]+$/;\nconst decimalNumber = /^\\d+$/;\n\n// The map to `acorn-jsx` tokens from `acorn` namespace objects.\nconst acornJsxMap = new WeakMap();\n\n// Get the original tokens for the given `acorn` namespace object.\nfunction getJsxTokens(acorn) {\n  acorn = acorn.Parser.acorn || acorn;\n  let acornJsx = acornJsxMap.get(acorn);\n  if (!acornJsx) {\n    const tt = acorn.tokTypes;\n    const TokContext = acorn.TokContext;\n    const TokenType = acorn.TokenType;\n    const tc_oTag = new TokContext('<tag', false);\n    const tc_cTag = new TokContext('</tag', false);\n    const tc_expr = new TokContext('<tag>...</tag>', true, true);\n    const tokContexts = {\n      tc_oTag: tc_oTag,\n      tc_cTag: tc_cTag,\n      tc_expr: tc_expr\n    };\n    const tokTypes = {\n      jsxName: new TokenType('jsxName'),\n      jsxText: new TokenType('jsxText', {beforeExpr: true}),\n      jsxTagStart: new TokenType('jsxTagStart', {startsExpr: true}),\n      jsxTagEnd: new TokenType('jsxTagEnd')\n    };\n\n    tokTypes.jsxTagStart.updateContext = function() {\n      this.context.push(tc_expr); // treat as beginning of JSX expression\n      this.context.push(tc_oTag); // start opening tag context\n      this.exprAllowed = false;\n    };\n    tokTypes.jsxTagEnd.updateContext = function(prevType) {\n      let out = this.context.pop();\n      if (out === tc_oTag && prevType === tt.slash || out === tc_cTag) {\n        this.context.pop();\n        this.exprAllowed = this.curContext() === tc_expr;\n      } else {\n        this.exprAllowed = true;\n      }\n    };\n\n    acornJsx = { tokContexts: tokContexts, tokTypes: tokTypes };\n    acornJsxMap.set(acorn, acornJsx);\n  }\n\n  return acornJsx;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(object) {\n  if (!object)\n    return object;\n\n  if (object.type === 'JSXIdentifier')\n    return object.name;\n\n  if (object.type === 'JSXNamespacedName')\n    return object.namespace.name + ':' + object.name.name;\n\n  if (object.type === 'JSXMemberExpression')\n    return getQualifiedJSXName(object.object) + '.' +\n    getQualifiedJSXName(object.property);\n}\n\nmodule.exports = function(options) {\n  options = options || {};\n  return function(Parser) {\n    return plugin({\n      allowNamespaces: options.allowNamespaces !== false,\n      allowNamespacedObjects: !!options.allowNamespacedObjects\n    }, Parser);\n  };\n};\n\n// This is `tokTypes` of the peer dep.\n// This can be different instances from the actual `tokTypes` this plugin uses.\nObject.defineProperty(module.exports, \"tokTypes\", {\n  get: function get_tokTypes() {\n    return getJsxTokens(require(\"acorn\")).tokTypes;\n  },\n  configurable: true,\n  enumerable: true\n});\n\nfunction plugin(options, Parser) {\n  const acorn = Parser.acorn || require(\"acorn\");\n  const acornJsx = getJsxTokens(acorn);\n  const tt = acorn.tokTypes;\n  const tok = acornJsx.tokTypes;\n  const tokContexts = acorn.tokContexts;\n  const tc_oTag = acornJsx.tokContexts.tc_oTag;\n  const tc_cTag = acornJsx.tokContexts.tc_cTag;\n  const tc_expr = acornJsx.tokContexts.tc_expr;\n  const isNewLine = acorn.isNewLine;\n  const isIdentifierStart = acorn.isIdentifierStart;\n  const isIdentifierChar = acorn.isIdentifierChar;\n\n  return class extends Parser {\n    // Expose actual `tokTypes` and `tokContexts` to other plugins.\n    static get acornJsx() {\n      return acornJsx;\n    }\n\n    // Reads inline JSX contents token.\n    jsx_readToken() {\n      let out = '', chunkStart = this.pos;\n      for (;;) {\n        if (this.pos >= this.input.length)\n          this.raise(this.start, 'Unterminated JSX contents');\n        let ch = this.input.charCodeAt(this.pos);\n\n        switch (ch) {\n        case 60: // '<'\n        case 123: // '{'\n          if (this.pos === this.start) {\n            if (ch === 60 && this.exprAllowed) {\n              ++this.pos;\n              return this.finishToken(tok.jsxTagStart);\n            }\n            return this.getTokenFromCode(ch);\n          }\n          out += this.input.slice(chunkStart, this.pos);\n          return this.finishToken(tok.jsxText, out);\n\n        case 38: // '&'\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readEntity();\n          chunkStart = this.pos;\n          break;\n\n        case 62: // '>'\n        case 125: // '}'\n          this.raise(\n            this.pos,\n            \"Unexpected token `\" + this.input[this.pos] + \"`. Did you mean `\" +\n              (ch === 62 ? \"&gt;\" : \"&rbrace;\") + \"` or \" + \"`{\\\"\" + this.input[this.pos] + \"\\\"}\" + \"`?\"\n          );\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.pos);\n            out += this.jsx_readNewLine(true);\n            chunkStart = this.pos;\n          } else {\n            ++this.pos;\n          }\n        }\n      }\n    }\n\n    jsx_readNewLine(normalizeCRLF) {\n      let ch = this.input.charCodeAt(this.pos);\n      let out;\n      ++this.pos;\n      if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {\n        ++this.pos;\n        out = normalizeCRLF ? '\\n' : '\\r\\n';\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n\n      return out;\n    }\n\n    jsx_readString(quote) {\n      let out = '', chunkStart = ++this.pos;\n      for (;;) {\n        if (this.pos >= this.input.length)\n          this.raise(this.start, 'Unterminated string constant');\n        let ch = this.input.charCodeAt(this.pos);\n        if (ch === quote) break;\n        if (ch === 38) { // '&'\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readEntity();\n          chunkStart = this.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readNewLine(false);\n          chunkStart = this.pos;\n        } else {\n          ++this.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsx_readEntity() {\n      let str = '', count = 0, entity;\n      let ch = this.input[this.pos];\n      if (ch !== '&')\n        this.raise(this.pos, 'Entity must start with an ampersand');\n      let startPos = ++this.pos;\n      while (this.pos < this.input.length && count++ < 10) {\n        ch = this.input[this.pos++];\n        if (ch === ';') {\n          if (str[0] === '#') {\n            if (str[1] === 'x') {\n              str = str.substr(2);\n              if (hexNumber.test(str))\n                entity = String.fromCharCode(parseInt(str, 16));\n            } else {\n              str = str.substr(1);\n              if (decimalNumber.test(str))\n                entity = String.fromCharCode(parseInt(str, 10));\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.pos = startPos;\n        return '&';\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can't contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsx_readWord() {\n      let ch, start = this.pos;\n      do {\n        ch = this.input.charCodeAt(++this.pos);\n      } while (isIdentifierChar(ch) || ch === 45); // '-'\n      return this.finishToken(tok.jsxName, this.input.slice(start, this.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsx_parseIdentifier() {\n      let node = this.startNode();\n      if (this.type === tok.jsxName)\n        node.name = this.value;\n      else if (this.type.keyword)\n        node.name = this.type.keyword;\n      else\n        this.unexpected();\n      this.next();\n      return this.finishNode(node, 'JSXIdentifier');\n    }\n\n    // Parse namespaced identifier.\n\n    jsx_parseNamespacedName() {\n      let startPos = this.start, startLoc = this.startLoc;\n      let name = this.jsx_parseIdentifier();\n      if (!options.allowNamespaces || !this.eat(tt.colon)) return name;\n      var node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsx_parseIdentifier();\n      return this.finishNode(node, 'JSXNamespacedName');\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsx_parseElementName() {\n      if (this.type === tok.jsxTagEnd) return '';\n      let startPos = this.start, startLoc = this.startLoc;\n      let node = this.jsx_parseNamespacedName();\n      if (this.type === tt.dot && node.type === 'JSXNamespacedName' && !options.allowNamespacedObjects) {\n        this.unexpected();\n      }\n      while (this.eat(tt.dot)) {\n        let newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsx_parseIdentifier();\n        node = this.finishNode(newNode, 'JSXMemberExpression');\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsx_parseAttributeValue() {\n      switch (this.type) {\n      case tt.braceL:\n        let node = this.jsx_parseExpressionContainer();\n        if (node.expression.type === 'JSXEmptyExpression')\n          this.raise(node.start, 'JSX attributes must only be assigned a non-empty expression');\n        return node;\n\n      case tok.jsxTagStart:\n      case tt.string:\n        return this.parseExprAtom();\n\n      default:\n        this.raise(this.start, 'JSX value should be either an expression or a quoted JSX text');\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsx_parseEmptyExpression() {\n      let node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);\n      return this.finishNodeAt(node, 'JSXEmptyExpression', this.start, this.startLoc);\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsx_parseExpressionContainer() {\n      let node = this.startNode();\n      this.next();\n      node.expression = this.type === tt.braceR\n        ? this.jsx_parseEmptyExpression()\n        : this.parseExpression();\n      this.expect(tt.braceR);\n      return this.finishNode(node, 'JSXExpressionContainer');\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsx_parseAttribute() {\n      let node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssign();\n        this.expect(tt.braceR);\n        return this.finishNode(node, 'JSXSpreadAttribute');\n      }\n      node.name = this.jsx_parseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;\n      return this.finishNode(node, 'JSXAttribute');\n    }\n\n    // Parses JSX opening tag starting after '<'.\n\n    jsx_parseOpeningElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      node.attributes = [];\n      let nodeName = this.jsx_parseElementName();\n      if (nodeName) node.name = nodeName;\n      while (this.type !== tt.slash && this.type !== tok.jsxTagEnd)\n        node.attributes.push(this.jsx_parseAttribute());\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tok.jsxTagEnd);\n      return this.finishNode(node, nodeName ? 'JSXOpeningElement' : 'JSXOpeningFragment');\n    }\n\n    // Parses JSX closing tag starting after '</'.\n\n    jsx_parseClosingElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      let nodeName = this.jsx_parseElementName();\n      if (nodeName) node.name = nodeName;\n      this.expect(tok.jsxTagEnd);\n      return this.finishNode(node, nodeName ? 'JSXClosingElement' : 'JSXClosingFragment');\n    }\n\n    // Parses entire JSX element, including it's opening tag\n    // (starting after '<'), attributes, contents and closing tag.\n\n    jsx_parseElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      let children = [];\n      let openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.type) {\n          case tok.jsxTagStart:\n            startPos = this.start; startLoc = this.startLoc;\n            this.next();\n            if (this.eat(tt.slash)) {\n              closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n            children.push(this.jsx_parseElementAt(startPos, startLoc));\n            break;\n\n          case tok.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case tt.braceL:\n            children.push(this.jsx_parseExpressionContainer());\n            break;\n\n          default:\n            this.unexpected();\n          }\n        }\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(\n            closingElement.start,\n            'Expected corresponding JSX closing tag for <' + getQualifiedJSXName(openingElement.name) + '>');\n        }\n      }\n      let fragmentOrElement = openingElement.name ? 'Element' : 'Fragment';\n\n      node['opening' + fragmentOrElement] = openingElement;\n      node['closing' + fragmentOrElement] = closingElement;\n      node.children = children;\n      if (this.type === tt.relational && this.value === \"<\") {\n        this.raise(this.start, \"Adjacent JSX elements must be wrapped in an enclosing tag\");\n      }\n      return this.finishNode(node, 'JSX' + fragmentOrElement);\n    }\n\n    // Parse JSX text\n\n    jsx_parseText() {\n      let node = this.parseLiteral(this.value);\n      node.type = \"JSXText\";\n      return node;\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsx_parseElement() {\n      let startPos = this.start, startLoc = this.startLoc;\n      this.next();\n      return this.jsx_parseElementAt(startPos, startLoc);\n    }\n\n    parseExprAtom(refShortHandDefaultPos) {\n      if (this.type === tok.jsxText)\n        return this.jsx_parseText();\n      else if (this.type === tok.jsxTagStart)\n        return this.jsx_parseElement();\n      else\n        return super.parseExprAtom(refShortHandDefaultPos);\n    }\n\n    readToken(code) {\n      let context = this.curContext();\n\n      if (context === tc_expr) return this.jsx_readToken();\n\n      if (context === tc_oTag || context === tc_cTag) {\n        if (isIdentifierStart(code)) return this.jsx_readWord();\n\n        if (code == 62) {\n          ++this.pos;\n          return this.finishToken(tok.jsxTagEnd);\n        }\n\n        if ((code === 34 || code === 39) && context == tc_oTag)\n          return this.jsx_readString(code);\n      }\n\n      if (code === 60 && this.exprAllowed && this.input.charCodeAt(this.pos + 1) !== 33) {\n        ++this.pos;\n        return this.finishToken(tok.jsxTagStart);\n      }\n      return super.readToken(code);\n    }\n\n    updateContext(prevType) {\n      if (this.type == tt.braceL) {\n        var curContext = this.curContext();\n        if (curContext == tc_oTag) this.context.push(tokContexts.b_expr);\n        else if (curContext == tc_expr) this.context.push(tokContexts.b_tmpl);\n        else super.updateContext(prevType);\n        this.exprAllowed = true;\n      } else if (this.type === tt.slash && prevType === tok.jsxTagStart) {\n        this.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n        this.context.push(tc_cTag); // reconsider as closing tag context\n        this.exprAllowed = false;\n      } else {\n        return super.updateContext(prevType);\n      }\n    }\n  };\n}\n"],
  "mappings": "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",
  "names": []
}
