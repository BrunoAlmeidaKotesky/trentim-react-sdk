function u(r, e) {
  const n = e == null ? void 0 : e.split(".");
  try {
    return n == null ? void 0 : n.reduce((t, s) => t && t[s] !== "undefined" ? t[s] : void 0, r);
  } catch (t) {
    console.error(t);
    return;
  }
}
const d = (r, e, n) => {
  var t;
  return Object(r) !== r || (Array.isArray(e) || (e = ((t = e == null ? void 0 : e.toString()) == null ? void 0 : t.match(/[^.[\]]+/g)) || []), (e == null ? void 0 : e.slice(0, -1)).reduce(
    (s, c, o) => Object(s[c]) === s[c] ? s[c] : s[c] = Math.abs(e[o + 1]) >> 0 === +e[o + 1] ? [] : {},
    r
  )[e[e.length - 1]] = n), r;
};
function a(r) {
  let e = [];
  for (let n in r)
    if (e.push(n), typeof r[n] == "object") {
      let t = a(r[n]);
      e = e.concat(t == null ? void 0 : t.map((s) => n + "." + s));
    }
  return e;
}
function f(r) {
  try {
    const e = location.search.substring(1), n = '{"' + decodeURI(e).replace(/"/g, '\\"').replace(/&/g, '","').replace(/\//, "\\/").replace(/=/g, '":"') + '"}', t = JSON.parse(n), s = Object.keys(t), c = Object.values(t), o = {};
    for (let i = 0; i < s.length; i++) {
      const l = s[i];
      r ? o[l == null ? void 0 : l.toLowerCase()] = c[i] : o[l] = c[i];
    }
    return o;
  } catch (e) {
    return console.error("[TRS] - Failed to get Url params as an object, ", e), null;
  }
}
const g = (r, e = null) => {
  try {
    return JSON.parse(r);
  } catch (n) {
    return console.error("[TRS] - ", n), e;
  }
};
function m(r, e, n) {
  const t = r.loaderConfig.internalModuleBaseUrls[0];
  if ((t == null ? void 0 : t.indexOf(e || "https://localhost:4321")) !== -1) {
    const s = document.createElement("script");
    s.src = n || "//localhost:35729/livereload.js?snipver=1", document.head.appendChild(s);
  }
}
function D(r, e = "pt-BR", n = void 0) {
  var s;
  return !(new Date(r) instanceof Date) && isNaN((s = new Date(r)) == null ? void 0 : s.getTime()) || !/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z/.test(r) ? r : new Intl.DateTimeFormat(e, n).format(new Date(r));
}
export {
  a,
  f as b,
  D as c,
  u as g,
  m as r,
  d as s,
  g as t
};
