import './style.css';
import l, { Suspense as E, useRef as f, useState as d, useLayoutEffect as g, useEffect as L } from "react";
function _(e) {
  const { fallback: t, ...n } = e;
  return /* @__PURE__ */ l.createElement(E, {
    fallback: t || "loading..."
  }, /* @__PURE__ */ l.createElement(b, {
    ref: e == null ? void 0 : e.ref,
    ...n
  }));
}
function b(e) {
  var a;
  const t = f(null), n = f(null), [w, i] = d(!1);
  if ((a = t.current) != null && a.promise)
    throw t.current.promise;
  g(() => {
    t.current === null && (t.current = {}, t.current.promise = new Promise((c, r) => {
      Object.assign(t.current, { resolve: c, reject: r });
    }), i(!0));
  }, []), L(() => {
    var c;
    n != null && n.current && ((c = e == null ? void 0 : e.refChanged) == null || c.call(e, n));
  }, [n == null ? void 0 : n.current, e == null ? void 0 : e.refDepencyList]);
  const { title: m } = e;
  return /* @__PURE__ */ l.createElement("iframe", {
    ...e,
    ref: n,
    title: m,
    onLoad: (c) => {
      var r, u;
      t.current.promise = null, (r = t.current) == null || r.resolve(), (u = e.onLoad) == null || u.call(e, c);
    },
    onError: (c) => {
      var r, u;
      t.current.promise = null, (r = t.current) == null || r.reject(), (u = e.onError) == null || u.call(e, c);
    }
  });
}
export {
  _ as IFrame
};
