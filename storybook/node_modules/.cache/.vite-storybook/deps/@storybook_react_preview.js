import {
  require_prop_types
} from "./chunk-5AT2JH2W.js";
import {
  require_isString
} from "./chunk-PSRQGSAX.js";
import {
  require_escodegen
} from "./chunk-TJQK6CNS.js";
import "./chunk-FLEDPHBU.js";
import {
  require_html_tags
} from "./chunk-YEIY6XDI.js";
import {
  U,
  b as b2
} from "./chunk-HB65Y7MI.js";
import {
  ancestor,
  base,
  simple
} from "./chunk-5NT3YMHP.js";
import {
  require_dist
} from "./chunk-UR3GURPN.js";
import {
  require_acorn_jsx
} from "./chunk-CTEIJWCB.js";
import {
  Parser,
  init_acorn
} from "./chunk-SZUMUNTA.js";
import {
  A,
  Er,
  J,
  P,
  Q,
  b,
  dr,
  gr,
  s,
  xe,
  yr
} from "./chunk-X73OXQ5F.js";
import "./chunk-HYE6ITUS.js";
import "./chunk-WCS2INSU.js";
import "./chunk-DHU45P7P.js";
import {
  require_react
} from "./chunk-WGQJK4T4.js";
import "./chunk-ZQ2CAHCN.js";
import "./chunk-H7VH7ZR2.js";
import {
  dedent
} from "./chunk-6P6QZ5GB.js";
import "./chunk-7LRRBEWW.js";
import "./chunk-2B4PH5BP.js";
import "./chunk-N442H5QH.js";
import "./chunk-RTPUDCD3.js";
import "./chunk-2NUKKQBK.js";
import "./chunk-R7UUYJRS.js";
import "./chunk-XYNUJO2D.js";
import "./chunk-UGUCA65D.js";
import "./chunk-NLI2OIFN.js";
import "./chunk-HU2HYPUP.js";
import {
  require_isPlainObject
} from "./chunk-G7LAUJAA.js";
import "./chunk-KF7TRBVO.js";
import "./chunk-2LUTTPWB.js";
import "./chunk-26KEH2CB.js";
import "./chunk-TNZNSDLX.js";
import "./chunk-LQUIYZD2.js";
import "./chunk-NARRU77W.js";
import "./chunk-NN2MR5WP.js";
import "./chunk-NI4D5O52.js";
import "./chunk-X72IJQ2S.js";
import "./chunk-53RI5JMP.js";
import "./chunk-H74F5WLR.js";
import {
  Y,
  c
} from "./chunk-UACHQL3Y.js";
import "./chunk-VN7B5P5J.js";
import "./chunk-M3XCZAQ7.js";
import "./chunk-E3PQJO36.js";
import "./chunk-XLQAS7N7.js";
import "./chunk-44IPE6AK.js";
import "./chunk-QOX6SKQP.js";
import "./chunk-M2IJONBL.js";
import "./chunk-BXMC46X5.js";
import {
  require_isFunction
} from "./chunk-U4KIHW4H.js";
import "./chunk-BCBLN6I6.js";
import "./chunk-FWVX4XGW.js";
import "./chunk-DGSQV3S6.js";
import "./chunk-LIF72B5R.js";
import "./chunk-EF2YLWYO.js";
import {
  i
} from "./chunk-3QDDUDC7.js";
import "./chunk-Z3ID2O7F.js";
import {
  __commonJS,
  __toESM
} from "./chunk-S5KM4IGW.js";

// node_modules/@storybook/react/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/@storybook/react/node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_SERVER_CONTEXT_TYPE:
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef2 = REACT_FORWARD_REF_TYPE;
        var Fragment2 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo2 = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        var hasWarnedAboutDeprecatedIsConcurrentMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isConcurrentMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
              hasWarnedAboutDeprecatedIsConcurrentMode = true;
              console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isContextConsumer2(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider2(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef2(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy2(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo2(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler2(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode2(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense2(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        function isSuspenseList(object) {
          return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
        }
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef2;
        exports.Fragment = Fragment2;
        exports.Lazy = Lazy;
        exports.Memo = Memo2;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.SuspenseList = SuspenseList;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer2;
        exports.isContextProvider = isContextProvider2;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef2;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy2;
        exports.isMemo = isMemo2;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler2;
        exports.isStrictMode = isStrictMode2;
        exports.isSuspense = isSuspense2;
        exports.isSuspenseList = isSuspenseList;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/@storybook/react/node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/@storybook/react/node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/@storybook/react/dist/config.mjs
var import_prop_types = __toESM(require_prop_types(), 1);
var import_html_tags = __toESM(require_html_tags(), 1);
var import_escodegen = __toESM(require_escodegen(), 1);
init_acorn();
var import_acorn_jsx = __toESM(require_acorn_jsx(), 1);
var import_isPlainObject = __toESM(require_isPlainObject(), 1);
var import_isFunction = __toESM(require_isFunction(), 1);
var import_isString = __toESM(require_isString(), 1);

// node_modules/@storybook/react/node_modules/is-plain-object/dist/is-plain-object.mjs
function isObject(o) {
  return Object.prototype.toString.call(o) === "[object Object]";
}
function isPlainObject(o) {
  var ctor, prot;
  if (isObject(o) === false)
    return false;
  ctor = o.constructor;
  if (ctor === void 0)
    return true;
  prot = ctor.prototype;
  if (isObject(prot) === false)
    return false;
  if (prot.hasOwnProperty("isPrototypeOf") === false) {
    return false;
  }
  return true;
}

// node_modules/@storybook/react/node_modules/react-element-to-jsx-string/dist/esm/index.js
var React = __toESM(require_react());
var import_react = __toESM(require_react());
var import_pretty_print_object = __toESM(require_dist());
var import_react_is = __toESM(require_react_is());
var spacer = function(times, tabStop) {
  if (times === 0) {
    return "";
  }
  return new Array(times * tabStop).fill(" ").join("");
};
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
    arr2[i2] = arr[i2];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function safeSortObject(value, seen) {
  if (value === null || _typeof(value) !== "object") {
    return value;
  }
  if (value instanceof Date || value instanceof RegExp || React.isValidElement(value)) {
    return value;
  }
  seen.add(value);
  if (Array.isArray(value)) {
    return value.map(function(v2) {
      return safeSortObject(v2, seen);
    });
  }
  return Object.keys(value).sort().reduce(function(result, key) {
    if (key === "_owner") {
      return result;
    }
    if (key === "current" || seen.has(value[key])) {
      result[key] = "[Circular]";
    } else {
      result[key] = safeSortObject(value[key], seen);
    }
    return result;
  }, {});
}
function sortObject(value) {
  return safeSortObject(value, /* @__PURE__ */ new WeakSet());
}
var createStringTreeNode = function createStringTreeNode2(value) {
  return {
    type: "string",
    value
  };
};
var createNumberTreeNode = function createNumberTreeNode2(value) {
  return {
    type: "number",
    value
  };
};
var createReactElementTreeNode = function createReactElementTreeNode2(displayName, props, defaultProps, childrens) {
  return {
    type: "ReactElement",
    displayName,
    props,
    defaultProps,
    childrens
  };
};
var createReactFragmentTreeNode = function createReactFragmentTreeNode2(key, childrens) {
  return {
    type: "ReactFragment",
    key,
    childrens
  };
};
var supportFragment = Boolean(import_react.Fragment);
var getFunctionTypeName = function getFunctionTypeName2(functionType) {
  if (!functionType.name || functionType.name === "_default") {
    return "No Display Name";
  }
  return functionType.name;
};
var getWrappedComponentDisplayName = function getWrappedComponentDisplayName2(Component) {
  switch (true) {
    case Boolean(Component.displayName):
      return Component.displayName;
    case Component.$$typeof === import_react_is.Memo:
      return getWrappedComponentDisplayName2(Component.type);
    case Component.$$typeof === import_react_is.ForwardRef:
      return getWrappedComponentDisplayName2(Component.render);
    default:
      return getFunctionTypeName(Component);
  }
};
var getReactElementDisplayName = function getReactElementDisplayName2(element) {
  switch (true) {
    case typeof element.type === "string":
      return element.type;
    case typeof element.type === "function":
      if (element.type.displayName) {
        return element.type.displayName;
      }
      return getFunctionTypeName(element.type);
    case (0, import_react_is.isForwardRef)(element):
    case (0, import_react_is.isMemo)(element):
      return getWrappedComponentDisplayName(element.type);
    case (0, import_react_is.isContextConsumer)(element):
      return "".concat(element.type._context.displayName || "Context", ".Consumer");
    case (0, import_react_is.isContextProvider)(element):
      return "".concat(element.type._context.displayName || "Context", ".Provider");
    case (0, import_react_is.isLazy)(element):
      return "Lazy";
    case (0, import_react_is.isProfiler)(element):
      return "Profiler";
    case (0, import_react_is.isStrictMode)(element):
      return "StrictMode";
    case (0, import_react_is.isSuspense)(element):
      return "Suspense";
    default:
      return "UnknownElementType";
  }
};
var noChildren = function noChildren2(propsValue, propName) {
  return propName !== "children";
};
var onlyMeaningfulChildren = function onlyMeaningfulChildren2(children) {
  return children !== true && children !== false && children !== null && children !== "";
};
var filterProps = function filterProps2(originalProps, cb) {
  var filteredProps = {};
  Object.keys(originalProps).filter(function(key) {
    return cb(originalProps[key], key);
  }).forEach(function(key) {
    return filteredProps[key] = originalProps[key];
  });
  return filteredProps;
};
var parseReactElement = function parseReactElement2(element, options) {
  var _options$displayName = options.displayName, displayNameFn = _options$displayName === void 0 ? getReactElementDisplayName : _options$displayName;
  if (typeof element === "string") {
    return createStringTreeNode(element);
  } else if (typeof element === "number") {
    return createNumberTreeNode(element);
  } else if (!import_react.default.isValidElement(element)) {
    throw new Error("react-element-to-jsx-string: Expected a React.Element, got `".concat(_typeof(element), "`"));
  }
  var displayName = displayNameFn(element);
  var props = filterProps(element.props, noChildren);
  if (element.ref !== null) {
    props.ref = element.ref;
  }
  var key = element.key;
  if (typeof key === "string" && key.search(/^\./)) {
    props.key = key;
  }
  var defaultProps = filterProps(element.type.defaultProps || {}, noChildren);
  var childrens = import_react.default.Children.toArray(element.props.children).filter(onlyMeaningfulChildren).map(function(child) {
    return parseReactElement2(child, options);
  });
  if (supportFragment && element.type === import_react.Fragment) {
    return createReactFragmentTreeNode(key, childrens);
  }
  return createReactElementTreeNode(displayName, props, defaultProps, childrens);
};
function noRefCheck() {
}
var inlineFunction = function inlineFunction2(fn) {
  return fn.toString().split("\n").map(function(line) {
    return line.trim();
  }).join("");
};
var defaultFunctionValue = inlineFunction;
var formatFunction = function(fn, options) {
  var _options$functionValu = options.functionValue, functionValue = _options$functionValu === void 0 ? defaultFunctionValue : _options$functionValu, showFunctions = options.showFunctions;
  if (!showFunctions && functionValue === defaultFunctionValue) {
    return functionValue(noRefCheck);
  }
  return functionValue(fn);
};
var formatComplexDataStructure = function(value, inline, lvl, options) {
  var normalizedValue = sortObject(value);
  var stringifiedValue = (0, import_pretty_print_object.prettyPrint)(normalizedValue, {
    transform: function transform(currentObj, prop, originalResult) {
      var currentValue = currentObj[prop];
      if (currentValue && (0, import_react.isValidElement)(currentValue)) {
        return formatTreeNode(parseReactElement(currentValue, options), true, lvl, options);
      }
      if (typeof currentValue === "function") {
        return formatFunction(currentValue, options);
      }
      return originalResult;
    }
  });
  if (inline) {
    return stringifiedValue.replace(/\s+/g, " ").replace(/{ /g, "{").replace(/ }/g, "}").replace(/\[ /g, "[").replace(/ ]/g, "]");
  }
  return stringifiedValue.replace(/\t/g, spacer(1, options.tabStop)).replace(/\n([^$])/g, "\n".concat(spacer(lvl + 1, options.tabStop), "$1"));
};
var escape$1 = function escape(s2) {
  return s2.replace(/"/g, "&quot;");
};
var formatPropValue = function formatPropValue2(propValue, inline, lvl, options) {
  if (typeof propValue === "number") {
    return "{".concat(String(propValue), "}");
  }
  if (typeof propValue === "string") {
    return '"'.concat(escape$1(propValue), '"');
  }
  if (_typeof(propValue) === "symbol") {
    var symbolDescription = propValue.valueOf().toString().replace(/Symbol\((.*)\)/, "$1");
    if (!symbolDescription) {
      return "{Symbol()}";
    }
    return "{Symbol('".concat(symbolDescription, "')}");
  }
  if (typeof propValue === "function") {
    return "{".concat(formatFunction(propValue, options), "}");
  }
  if ((0, import_react.isValidElement)(propValue)) {
    return "{".concat(formatTreeNode(parseReactElement(propValue, options), true, lvl, options), "}");
  }
  if (propValue instanceof Date) {
    if (isNaN(propValue.valueOf())) {
      return "{new Date(NaN)}";
    }
    return '{new Date("'.concat(propValue.toISOString(), '")}');
  }
  if (isPlainObject(propValue) || Array.isArray(propValue)) {
    return "{".concat(formatComplexDataStructure(propValue, inline, lvl, options), "}");
  }
  return "{".concat(String(propValue), "}");
};
var formatProp = function(name, hasValue, value, hasDefaultValue, defaultValue, inline, lvl, options) {
  if (!hasValue && !hasDefaultValue) {
    throw new Error('The prop "'.concat(name, '" has no value and no default: could not be formatted'));
  }
  var usedValue = hasValue ? value : defaultValue;
  var useBooleanShorthandSyntax = options.useBooleanShorthandSyntax, tabStop = options.tabStop;
  var formattedPropValue = formatPropValue(usedValue, inline, lvl, options);
  var attributeFormattedInline = " ";
  var attributeFormattedMultiline = "\n".concat(spacer(lvl + 1, tabStop));
  var isMultilineAttribute = formattedPropValue.includes("\n");
  if (useBooleanShorthandSyntax && formattedPropValue === "{false}" && !hasDefaultValue) {
    attributeFormattedInline = "";
    attributeFormattedMultiline = "";
  } else if (useBooleanShorthandSyntax && formattedPropValue === "{true}") {
    attributeFormattedInline += "".concat(name);
    attributeFormattedMultiline += "".concat(name);
  } else {
    attributeFormattedInline += "".concat(name, "=").concat(formattedPropValue);
    attributeFormattedMultiline += "".concat(name, "=").concat(formattedPropValue);
  }
  return {
    attributeFormattedInline,
    attributeFormattedMultiline,
    isMultilineAttribute
  };
};
var mergeSiblingPlainStringChildrenReducer = function(previousNodes, currentNode) {
  var nodes = previousNodes.slice(0, previousNodes.length > 0 ? previousNodes.length - 1 : 0);
  var previousNode = previousNodes[previousNodes.length - 1];
  if (previousNode && (currentNode.type === "string" || currentNode.type === "number") && (previousNode.type === "string" || previousNode.type === "number")) {
    nodes.push(createStringTreeNode(String(previousNode.value) + String(currentNode.value)));
  } else {
    if (previousNode) {
      nodes.push(previousNode);
    }
    nodes.push(currentNode);
  }
  return nodes;
};
var isKeyOrRefProps = function isKeyOrRefProps2(propName) {
  return ["key", "ref"].includes(propName);
};
var sortPropsByNames = function(shouldSortUserProps) {
  return function(props) {
    var haveKeyProp = props.includes("key");
    var haveRefProp = props.includes("ref");
    var userPropsOnly = props.filter(function(oneProp) {
      return !isKeyOrRefProps(oneProp);
    });
    var sortedProps = shouldSortUserProps ? _toConsumableArray(userPropsOnly.sort()) : _toConsumableArray(userPropsOnly);
    if (haveRefProp) {
      sortedProps.unshift("ref");
    }
    if (haveKeyProp) {
      sortedProps.unshift("key");
    }
    return sortedProps;
  };
};
function createPropFilter(props, filter) {
  if (Array.isArray(filter)) {
    return function(key) {
      return filter.indexOf(key) === -1;
    };
  } else {
    return function(key) {
      return filter(props[key], key);
    };
  }
}
var compensateMultilineStringElementIndentation = function compensateMultilineStringElementIndentation2(element, formattedElement, inline, lvl, options) {
  var tabStop = options.tabStop;
  if (element.type === "string") {
    return formattedElement.split("\n").map(function(line, offset) {
      if (offset === 0) {
        return line;
      }
      return "".concat(spacer(lvl, tabStop)).concat(line);
    }).join("\n");
  }
  return formattedElement;
};
var formatOneChildren = function formatOneChildren2(inline, lvl, options) {
  return function(element) {
    return compensateMultilineStringElementIndentation(element, formatTreeNode(element, inline, lvl, options), inline, lvl, options);
  };
};
var onlyPropsWithOriginalValue = function onlyPropsWithOriginalValue2(defaultProps, props) {
  return function(propName) {
    var haveDefaultValue = Object.keys(defaultProps).includes(propName);
    return !haveDefaultValue || haveDefaultValue && defaultProps[propName] !== props[propName];
  };
};
var isInlineAttributeTooLong = function isInlineAttributeTooLong2(attributes, inlineAttributeString, lvl, tabStop, maxInlineAttributesLineLength) {
  if (!maxInlineAttributesLineLength) {
    return attributes.length > 1;
  }
  return spacer(lvl, tabStop).length + inlineAttributeString.length > maxInlineAttributesLineLength;
};
var shouldRenderMultilineAttr = function shouldRenderMultilineAttr2(attributes, inlineAttributeString, containsMultilineAttr, inline, lvl, tabStop, maxInlineAttributesLineLength) {
  return (isInlineAttributeTooLong(attributes, inlineAttributeString, lvl, tabStop, maxInlineAttributesLineLength) || containsMultilineAttr) && !inline;
};
var formatReactElementNode = function(node, inline, lvl, options) {
  var type = node.type, _node$displayName = node.displayName, displayName = _node$displayName === void 0 ? "" : _node$displayName, childrens = node.childrens, _node$props = node.props, props = _node$props === void 0 ? {} : _node$props, _node$defaultProps = node.defaultProps, defaultProps = _node$defaultProps === void 0 ? {} : _node$defaultProps;
  if (type !== "ReactElement") {
    throw new Error('The "formatReactElementNode" function could only format node of type "ReactElement". Given:  '.concat(type));
  }
  var filterProps3 = options.filterProps, maxInlineAttributesLineLength = options.maxInlineAttributesLineLength, showDefaultProps = options.showDefaultProps, sortProps = options.sortProps, tabStop = options.tabStop;
  var out = "<".concat(displayName);
  var outInlineAttr = out;
  var outMultilineAttr = out;
  var containsMultilineAttr = false;
  var visibleAttributeNames = [];
  var propFilter = createPropFilter(props, filterProps3);
  Object.keys(props).filter(propFilter).filter(onlyPropsWithOriginalValue(defaultProps, props)).forEach(function(propName) {
    return visibleAttributeNames.push(propName);
  });
  Object.keys(defaultProps).filter(propFilter).filter(function() {
    return showDefaultProps;
  }).filter(function(defaultPropName) {
    return !visibleAttributeNames.includes(defaultPropName);
  }).forEach(function(defaultPropName) {
    return visibleAttributeNames.push(defaultPropName);
  });
  var attributes = sortPropsByNames(sortProps)(visibleAttributeNames);
  attributes.forEach(function(attributeName) {
    var _formatProp = formatProp(attributeName, Object.keys(props).includes(attributeName), props[attributeName], Object.keys(defaultProps).includes(attributeName), defaultProps[attributeName], inline, lvl, options), attributeFormattedInline = _formatProp.attributeFormattedInline, attributeFormattedMultiline = _formatProp.attributeFormattedMultiline, isMultilineAttribute = _formatProp.isMultilineAttribute;
    if (isMultilineAttribute) {
      containsMultilineAttr = true;
    }
    outInlineAttr += attributeFormattedInline;
    outMultilineAttr += attributeFormattedMultiline;
  });
  outMultilineAttr += "\n".concat(spacer(lvl, tabStop));
  if (shouldRenderMultilineAttr(attributes, outInlineAttr, containsMultilineAttr, inline, lvl, tabStop, maxInlineAttributesLineLength)) {
    out = outMultilineAttr;
  } else {
    out = outInlineAttr;
  }
  if (childrens && childrens.length > 0) {
    var newLvl = lvl + 1;
    out += ">";
    if (!inline) {
      out += "\n";
      out += spacer(newLvl, tabStop);
    }
    out += childrens.reduce(mergeSiblingPlainStringChildrenReducer, []).map(formatOneChildren(inline, newLvl, options)).join(!inline ? "\n".concat(spacer(newLvl, tabStop)) : "");
    if (!inline) {
      out += "\n";
      out += spacer(newLvl - 1, tabStop);
    }
    out += "</".concat(displayName, ">");
  } else {
    if (!isInlineAttributeTooLong(attributes, outInlineAttr, lvl, tabStop, maxInlineAttributesLineLength)) {
      out += " ";
    }
    out += "/>";
  }
  return out;
};
var REACT_FRAGMENT_TAG_NAME_SHORT_SYNTAX = "";
var REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX = "React.Fragment";
var toReactElementTreeNode = function toReactElementTreeNode2(displayName, key, childrens) {
  var props = {};
  if (key) {
    props = {
      key
    };
  }
  return {
    type: "ReactElement",
    displayName,
    props,
    defaultProps: {},
    childrens
  };
};
var isKeyedFragment = function isKeyedFragment2(_ref) {
  var key = _ref.key;
  return Boolean(key);
};
var hasNoChildren = function hasNoChildren2(_ref2) {
  var childrens = _ref2.childrens;
  return childrens.length === 0;
};
var formatReactFragmentNode = function(node, inline, lvl, options) {
  var type = node.type, key = node.key, childrens = node.childrens;
  if (type !== "ReactFragment") {
    throw new Error('The "formatReactFragmentNode" function could only format node of type "ReactFragment". Given: '.concat(type));
  }
  var useFragmentShortSyntax = options.useFragmentShortSyntax;
  var displayName;
  if (useFragmentShortSyntax) {
    if (hasNoChildren(node) || isKeyedFragment(node)) {
      displayName = REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX;
    } else {
      displayName = REACT_FRAGMENT_TAG_NAME_SHORT_SYNTAX;
    }
  } else {
    displayName = REACT_FRAGMENT_TAG_NAME_EXPLICIT_SYNTAX;
  }
  return formatReactElementNode(toReactElementTreeNode(displayName, key, childrens), inline, lvl, options);
};
var jsxStopChars = ["<", ">", "{", "}"];
var shouldBeEscaped = function shouldBeEscaped2(s2) {
  return jsxStopChars.some(function(jsxStopChar) {
    return s2.includes(jsxStopChar);
  });
};
var escape2 = function escape3(s2) {
  if (!shouldBeEscaped(s2)) {
    return s2;
  }
  return "{`".concat(s2, "`}");
};
var preserveTrailingSpace = function preserveTrailingSpace2(s2) {
  var result = s2;
  if (result.endsWith(" ")) {
    result = result.replace(/^(.*?)(\s+)$/, "$1{'$2'}");
  }
  if (result.startsWith(" ")) {
    result = result.replace(/^(\s+)(.*)$/, "{'$1'}$2");
  }
  return result;
};
var formatTreeNode = function(node, inline, lvl, options) {
  if (node.type === "number") {
    return String(node.value);
  }
  if (node.type === "string") {
    return node.value ? "".concat(preserveTrailingSpace(escape2(String(node.value)))) : "";
  }
  if (node.type === "ReactElement") {
    return formatReactElementNode(node, inline, lvl, options);
  }
  if (node.type === "ReactFragment") {
    return formatReactFragmentNode(node, inline, lvl, options);
  }
  throw new TypeError('Unknow format type "'.concat(node.type, '"'));
};
var formatTree = function(node, options) {
  return formatTreeNode(node, false, 0, options);
};
var reactElementToJsxString = function reactElementToJsxString2(element) {
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$filterProps = _ref.filterProps, filterProps3 = _ref$filterProps === void 0 ? [] : _ref$filterProps, _ref$showDefaultProps = _ref.showDefaultProps, showDefaultProps = _ref$showDefaultProps === void 0 ? true : _ref$showDefaultProps, _ref$showFunctions = _ref.showFunctions, showFunctions = _ref$showFunctions === void 0 ? false : _ref$showFunctions, functionValue = _ref.functionValue, _ref$tabStop = _ref.tabStop, tabStop = _ref$tabStop === void 0 ? 2 : _ref$tabStop, _ref$useBooleanShorth = _ref.useBooleanShorthandSyntax, useBooleanShorthandSyntax = _ref$useBooleanShorth === void 0 ? true : _ref$useBooleanShorth, _ref$useFragmentShort = _ref.useFragmentShortSyntax, useFragmentShortSyntax = _ref$useFragmentShort === void 0 ? true : _ref$useFragmentShort, _ref$sortProps = _ref.sortProps, sortProps = _ref$sortProps === void 0 ? true : _ref$sortProps, maxInlineAttributesLineLength = _ref.maxInlineAttributesLineLength, displayName = _ref.displayName;
  if (!element) {
    throw new Error("react-element-to-jsx-string: Expected a ReactElement");
  }
  var options = {
    filterProps: filterProps3,
    showDefaultProps,
    showFunctions,
    functionValue,
    tabStop,
    useBooleanShorthandSyntax,
    useFragmentShortSyntax,
    sortProps,
    maxInlineAttributesLineLength,
    displayName
  };
  return formatTree(parseReactElement(element, options), options);
};

// node_modules/@storybook/react/dist/config.mjs
var import_react2 = __toESM(require_react(), 1);
function G(e, t) {
  let r = e != null, n = t != null;
  if (!r && !n)
    return "";
  let o = [];
  if (r) {
    let s2 = e.map((p) => {
      let c2 = p.getPrettyName(), i2 = p.getTypeName();
      return i2 != null ? `${c2}: ${i2}` : c2;
    });
    o.push(`(${s2.join(", ")})`);
  } else
    o.push("()");
  return n && o.push(`=> ${t.getTypeName()}`), o.join(" ");
}
function z(e, t) {
  let r = e != null, n = t != null;
  if (!r && !n)
    return "";
  let o = [];
  return r ? o.push("( ... )") : o.push("()"), n && o.push(`=> ${t.getTypeName()}`), o.join(" ");
}
function Q2(e) {
  return e.replace(/,/g, `,\r
`);
}
var S = "custom";
var d = "object";
var C = "array";
var Z = "class";
var f = "func";
var m = "element";
function E(e) {
  return import_html_tags.default.includes(e.toLowerCase());
}
var ee = { format: { indent: { style: "  " }, semicolons: false } };
var _e = { ...ee, format: { newline: "" } };
var ve = { ...ee };
function y(e, t = false) {
  return (0, import_escodegen.generate)(e, t ? _e : ve);
}
function h(e, t = false) {
  return t ? we(e) : y(e);
}
function we(e) {
  let t = y(e, true);
  return t.endsWith(" }") || (t = `${t.slice(0, -1)} }`), t;
}
function U2(e, t = false) {
  return t ? Be(e) : $e(e);
}
function $e(e) {
  let t = y(e);
  return t.endsWith("  }]") && (t = dedent(t)), t;
}
function Be(e) {
  let t = y(e, true);
  return t.startsWith("[    ") && (t = t.replace("[    ", "[")), t;
}
var F = (e) => e.$$typeof === Symbol.for("react.memo");
var te = (e) => e.$$typeof === Symbol.for("react.forward_ref");
var _ = { ...base, JSXElement: () => {
} };
var We = Parser.extend((0, import_acorn_jsx.default)());
function A2(e) {
  return e != null ? e.name : null;
}
function re(e) {
  return e.filter((t) => t.type === "ObjectExpression" || t.type === "ArrayExpression");
}
function ne(e) {
  let t = [];
  return ancestor(e, { ObjectExpression(r, n) {
    t.push(re(n).length);
  }, ArrayExpression(r, n) {
    t.push(re(n).length);
  } }, _), Math.max(...t);
}
function He(e) {
  return { inferredType: { type: "Identifier", identifier: A2(e) }, ast: e };
}
function qe(e) {
  return { inferredType: { type: "Literal" }, ast: e };
}
function Ke(e) {
  let t;
  simple(e.body, { JSXElement(s2) {
    t = s2;
  } }, _);
  let n = { type: t != null ? "Element" : "Function", params: e.params, hasParams: e.params.length !== 0 }, o = A2(e.id);
  return o != null && (n.identifier = o), { inferredType: n, ast: e };
}
function Ge(e) {
  let t;
  return simple(e.body, { JSXElement(n) {
    t = n;
  } }, _), { inferredType: { type: t != null ? "Element" : "Class", identifier: A2(e.id) }, ast: e };
}
function ze(e) {
  let t = { type: "Element" }, r = A2(e.openingElement.name);
  return r != null && (t.identifier = r), { inferredType: t, ast: e };
}
function Qe(e) {
  let t = e.callee.type === "MemberExpression" ? e.callee.property : e.callee;
  return A2(t) === "shape" ? oe(e.arguments[0]) : null;
}
function oe(e) {
  return { inferredType: { type: "Object", depth: ne(e) }, ast: e };
}
function Ze(e) {
  return { inferredType: { type: "Array", depth: ne(e) }, ast: e };
}
function et(e) {
  switch (e.type) {
    case "Identifier":
      return He(e);
    case "Literal":
      return qe(e);
    case "FunctionExpression":
    case "ArrowFunctionExpression":
      return Ke(e);
    case "ClassExpression":
      return Ge(e);
    case "JSXElement":
      return ze(e);
    case "CallExpression":
      return Qe(e);
    case "ObjectExpression":
      return oe(e);
    case "ArrayExpression":
      return Ze(e);
    default:
      return null;
  }
}
function se(e) {
  let t = We.parse(`(${e})`), r = { inferredType: { type: "Unknown" }, ast: t };
  if (t.body[0] != null) {
    let n = t.body[0];
    switch (n.type) {
      case "ExpressionStatement": {
        let o = et(n.expression);
        o != null && (r = o);
        break;
      }
      default:
        break;
    }
  }
  return r;
}
function l(e) {
  try {
    return { ...se(e) };
  } catch {
  }
  return { inferredType: { type: "Unknown" } };
}
var rt = 150;
function u({ name: e, short: t, compact: r, full: n, inferredType: o }) {
  return { name: e, short: t, compact: r, full: n != null ? n : t, inferredType: o };
}
function ue(e) {
  return e.replace(/PropTypes./g, "").replace(/.isRequired/g, "");
}
function ie(e) {
  return e.split(/\r?\n/);
}
function j(e, t = false) {
  return ue(h(e, t));
}
function pe(e, t = false) {
  return ue(y(e, t));
}
function nt(e) {
  switch (e) {
    case "Object":
      return d;
    case "Array":
      return C;
    case "Class":
      return Z;
    case "Function":
      return f;
    case "Element":
      return m;
    default:
      return S;
  }
}
function le(e, t) {
  let { inferredType: r, ast: n } = l(e), { type: o } = r, s2, p, c2;
  switch (o) {
    case "Identifier":
    case "Literal":
      s2 = e, p = e;
      break;
    case "Object": {
      let { depth: i2 } = r;
      s2 = d, p = i2 === 1 ? j(n, true) : null, c2 = j(n);
      break;
    }
    case "Element": {
      let { identifier: i2 } = r;
      s2 = i2 != null && !E(i2) ? i2 : m, p = ie(e).length === 1 ? e : null, c2 = e;
      break;
    }
    case "Array": {
      let { depth: i2 } = r;
      s2 = C, p = i2 <= 2 ? pe(n, true) : null, c2 = pe(n);
      break;
    }
    default:
      s2 = nt(o), p = ie(e).length === 1 ? e : null, c2 = e;
      break;
  }
  return u({ name: t, short: s2, compact: p, full: c2, inferredType: o });
}
function ot({ raw: e }) {
  return e != null ? le(e, "custom") : u({ name: "custom", short: S, compact: S });
}
function st(e) {
  let { jsDocTags: t } = e;
  return t != null && (t.params != null || t.returns != null) ? u({ name: "func", short: z(t.params, t.returns), compact: null, full: G(t.params, t.returns) }) : u({ name: "func", short: f, compact: f });
}
function it(e, t) {
  let r = Object.keys(e.value).map((p) => `${p}: ${P2(e.value[p], t).full}`).join(", "), { inferredType: n, ast: o } = l(`{ ${r} }`), { depth: s2 } = n;
  return u({ name: "shape", short: d, compact: s2 === 1 && o ? j(o, true) : null, full: o ? j(o) : null });
}
function v(e) {
  return `objectOf(${e})`;
}
function pt(e, t) {
  let { short: r, compact: n, full: o } = P2(e.value, t);
  return u({ name: "objectOf", short: v(r), compact: n != null ? v(n) : null, full: o && v(o) });
}
function at(e, t) {
  if (Array.isArray(e.value)) {
    let r = e.value.reduce((n, o) => {
      let { short: s2, compact: p, full: c2 } = P2(o, t);
      return n.short.push(s2), n.compact.push(p), n.full.push(c2), n;
    }, { short: [], compact: [], full: [] });
    return u({ name: "union", short: r.short.join(" | "), compact: r.compact.every((n) => n != null) ? r.compact.join(" | ") : null, full: r.full.join(" | ") });
  }
  return u({ name: "union", short: e.value, compact: null });
}
function ct({ value: e, computed: t }) {
  return t ? le(e, "enumvalue") : u({ name: "enumvalue", short: e, compact: e });
}
function ut(e) {
  if (Array.isArray(e.value)) {
    let t = e.value.reduce((r, n) => {
      let { short: o, compact: s2, full: p } = ct(n);
      return r.short.push(o), r.compact.push(s2), r.full.push(p), r;
    }, { short: [], compact: [], full: [] });
    return u({ name: "enum", short: t.short.join(" | "), compact: t.compact.every((r) => r != null) ? t.compact.join(" | ") : null, full: t.full.join(" | ") });
  }
  return u({ name: "enum", short: e.value, compact: e.value });
}
function w(e) {
  return `${e}[]`;
}
function ae(e) {
  return `[${e}]`;
}
function ce(e, t, r) {
  return u({ name: "arrayOf", short: w(e), compact: t != null ? ae(t) : null, full: r && ae(r) });
}
function lt(e, t) {
  let { name: r, short: n, compact: o, full: s2, inferredType: p } = P2(e.value, t);
  if (r === "custom") {
    if (p === "Object")
      return ce(n, o, s2);
  } else if (r === "shape")
    return ce(n, o, s2);
  return u({ name: "arrayOf", short: w(n), compact: w(n) });
}
function P2(e, t) {
  try {
    switch (e.name) {
      case "custom":
        return ot(e);
      case "func":
        return st(t);
      case "shape":
        return it(e, t);
      case "instanceOf":
        return u({ name: "instanceOf", short: e.value, compact: e.value });
      case "objectOf":
        return pt(e, t);
      case "union":
        return at(e, t);
      case "enum":
        return ut(e);
      case "arrayOf":
        return lt(e, t);
      default:
        return u({ name: e.name, short: e.name, compact: e.name });
    }
  } catch (r) {
    console.error(r);
  }
  return u({ name: "unknown", short: "unknown", compact: "unknown" });
}
function fe(e) {
  let { type: t } = e.docgenInfo;
  if (t == null)
    return null;
  try {
    switch (t.name) {
      case "custom":
      case "shape":
      case "instanceOf":
      case "objectOf":
      case "union":
      case "enum":
      case "arrayOf": {
        let { short: r, compact: n, full: o } = P2(t, e);
        return n != null && !P(n) ? s(n) : o ? s(r, o) : s(r);
      }
      case "func": {
        let { short: r, full: n } = P2(t, e), o = r, s2;
        return n && n.length < rt ? o = n : n && (s2 = Q2(n)), s(o, s2);
      }
      default:
        return null;
    }
  } catch (r) {
    console.error(r);
  }
  return null;
}
function k({ inferredType: e, ast: t }) {
  let { depth: r } = e;
  if (r === 1) {
    let n = h(t, true);
    if (!J(n))
      return s(n);
  }
  return s(d, h(t));
}
function J2({ inferredType: e, ast: t }) {
  let { depth: r } = e;
  if (r <= 2) {
    let n = U2(t, true);
    if (!J(n))
      return s(n);
  }
  return s(C, U2(t));
}
function R(e, t) {
  return t ? `${e}( ... )` : `${e}()`;
}
function O(e) {
  return `<${e} />`;
}
function $(e) {
  let { type: t, identifier: r } = e;
  switch (t) {
    case "Function":
      return R(r, e.hasParams);
    case "Element":
      return O(r);
    default:
      return r;
  }
}
function yt({ inferredType: e, ast: t }) {
  let { identifier: r } = e;
  if (r != null)
    return s($(e), y(t));
  let n = y(t, true);
  return J(n) ? s(f, y(t)) : s(n);
}
function Tt(e, t) {
  let { inferredType: r } = t, { identifier: n } = r;
  if (n != null && !E(n)) {
    let o = $(r);
    return s(o, e);
  }
  return J(e) ? s(m, e) : s(e);
}
function L(e) {
  try {
    let t = l(e);
    switch (t.inferredType.type) {
      case "Object":
        return k(t);
      case "Function":
        return yt(t);
      case "Element":
        return Tt(e, t);
      case "Array":
        return J2(t);
      default:
        return null;
    }
  } catch (t) {
    console.error(t);
  }
  return null;
}
function Ie(e) {
  return e.$$typeof != null;
}
function B(e, t) {
  let { name: r } = e;
  return r !== "" && r !== "anonymous" && r !== t ? r : null;
}
var Et = (e) => s(JSON.stringify(e));
function Pt(e) {
  let { type: t } = e, { displayName: r } = t, n = reactElementToJsxString(e, {});
  if (r != null) {
    let o = O(r);
    return s(o, n);
  }
  if ((0, import_isString.default)(t) && E(t)) {
    let s2 = reactElementToJsxString(e, { tabStop: 0 }).replace(/\r?\n|\r/g, "");
    if (!J(s2))
      return s(s2);
  }
  return s(m, n);
}
var Ot = (e) => {
  if (Ie(e) && e.type != null)
    return Pt(e);
  if ((0, import_isPlainObject.default)(e)) {
    let t = l(JSON.stringify(e));
    return k(t);
  }
  if (Array.isArray(e)) {
    let t = l(JSON.stringify(e));
    return J2(t);
  }
  return s(d);
};
var Nt = (e, t) => {
  let r = false, n;
  if ((0, import_isFunction.default)(e.render))
    r = true;
  else if (e.prototype != null && (0, import_isFunction.default)(e.prototype.render))
    r = true;
  else {
    let s2;
    try {
      n = l(e.toString());
      let { hasParams: p, params: c2 } = n.inferredType;
      p ? c2.length === 1 && c2[0].type === "ObjectPattern" && (s2 = e({})) : s2 = e(), s2 != null && Ie(s2) && (r = true);
    } catch {
    }
  }
  let o = B(e, t.name);
  if (o != null) {
    if (r)
      return s(O(o));
    n != null && (n = l(e.toString()));
    let { hasParams: s2 } = n.inferredType;
    return s(R(o, s2));
  }
  return s(r ? m : f);
};
var xt = (e) => s(e.toString());
var Ee = { string: Et, object: Ot, function: Nt, default: xt };
function Pe(e = {}) {
  return { ...Ee, ...e };
}
function V(e, t, r = Ee) {
  try {
    switch (typeof e) {
      case "string":
        return r.string(e, t);
      case "object":
        return r.object(e, t);
      case "function":
        return r.function(e, t);
      default:
        return r.default(e, t);
    }
  } catch (n) {
    console.error(n);
  }
  return null;
}
function Oe(e, t) {
  let { propTypes: r } = t;
  return r != null ? Object.keys(r).map((n) => e.find((o) => o.name === n)).filter(Boolean) : e;
}
var Ct = (e, { name: t, type: r }) => {
  let n = r.summary === "element" || r.summary === "elementType", o = B(e, t);
  if (o != null) {
    if (n)
      return s(O(o));
    let { hasParams: s2 } = l(e.toString()).inferredType;
    return s(R(o, s2));
  }
  return s(n ? m : f);
};
var Ne = Pe({ function: Ct });
function ht(e, t) {
  let { propDef: r } = e, n = fe(e);
  n != null && (r.type = n);
  let { defaultValue: o } = e.docgenInfo;
  if (o != null && o.value != null) {
    let s2 = L(o.value);
    s2 != null && (r.defaultValue = s2);
  } else if (t != null) {
    let s2 = V(t, r, Ne);
    s2 != null && (r.defaultValue = s2);
  }
  return r;
}
function xe2(e, t) {
  let r = t.defaultProps != null ? t.defaultProps : {}, n = e.map((o) => ht(o, r[o.propDef.name]));
  return Oe(n, t);
}
function At(e, t) {
  let { propDef: r } = e, { defaultValue: n } = e.docgenInfo;
  if (n != null && n.value != null) {
    let o = L(n.value);
    o != null && (r.defaultValue = o);
  } else if (t != null) {
    let o = V(t, r);
    o != null && (r.defaultValue = o);
  }
  return r;
}
function Ce(e) {
  return e.map((t) => At(t));
}
var Re = /* @__PURE__ */ new Map();
Object.keys(import_prop_types.default).forEach((e) => {
  let t = import_prop_types.default[e];
  Re.set(t, e), Re.set(t.isRequired, e);
});
function Ft(e, t) {
  let r = e;
  !b(e) && !e.propTypes && F(e) && (r = e.type);
  let n = yr(r, t);
  if (n.length === 0)
    return [];
  switch (n[0].typeSystem) {
    case Q.JAVASCRIPT:
      return xe2(n, e);
    case Q.TYPESCRIPT:
      return Ce(n);
    default:
      return n.map((o) => o.propDef);
  }
}
var Se = (e) => ({ rows: Ft(e, "props") });
var Fe = (e) => {
  if (e) {
    let { rows: t } = Se(e);
    if (t)
      return t.reduce((r, n) => {
        let { name: o, description: s2, type: p, sbType: c2, defaultValue: i2, jsDocTags: g, required: H } = n;
        return r[o] = { name: o, description: s2, type: { required: H, ...c2 }, table: { type: p, jsDocTags: g, defaultValue: i2 } }, r;
      }, {});
  }
  return null;
};
var Lt = (e, t, r) => typeof t.transformSource != "function" ? e : t.transformSource(e, r);
var Vt = (e, t) => {
  if (typeof e > "u")
    return i.warn("Too many skip or undefined component"), null;
  let r = e, n = r.type;
  for (let i2 = 0; i2 < t.skip; i2 += 1) {
    if (typeof r > "u")
      return i.warn("Cannot skip undefined element"), null;
    if (import_react2.default.Children.count(r) > 1)
      return i.warn("Trying to skip an array of elements"), null;
    typeof r.props.children > "u" ? (i.warn("Not enough children to skip elements."), typeof r.type == "function" && r.type.name === "" && (r = import_react2.default.createElement(n, { ...r.props }))) : typeof r.props.children == "function" ? r = r.props.children() : r = r.props.children;
  }
  let p = { ...typeof t.displayName == "string" ? { showFunctions: true, displayName: () => t.displayName } : { displayName: (i2) => i2.type.displayName || (i2.type === Symbol.for("react.profiler") ? "Profiler" : null) || A(i2.type, "displayName") || (i2.type.name !== "_default" ? i2.type.name : null) || (typeof i2.type == "function" ? "No Display Name" : null) || (te(i2.type) ? i2.type.render.name : null) || (F(i2.type) ? i2.type.type.name : null) || i2.type }, ...{ filterProps: (i2, g) => i2 !== void 0 }, ...t };
  return import_react2.default.Children.map(e, (i2) => {
    let g = typeof i2 == "number" ? i2.toString() : i2, x = (typeof reactElementToJsxString == "function" ? reactElementToJsxString : reactElementToJsxString.default)(g, p);
    if (x.indexOf("&quot;") > -1) {
      let q = x.match(/\S+=\\"([^"]*)\\"/g);
      q && q.forEach((K) => {
        x = x.replace(K, K.replace(/&quot;/g, "'"));
      });
    }
    return x;
  }).join(`
`).replace(/function\s+noRefCheck\(\)\s+\{\}/g, "() => {}");
};
var Mt = { skip: 0, showFunctions: false, enableBeautify: true, showDefaultProps: false };
var Ut = (e) => {
  var _a;
  let t = (_a = e == null ? void 0 : e.parameters.docs) == null ? void 0 : _a.source, r = e == null ? void 0 : e.parameters.__isArgsStory;
  return (t == null ? void 0 : t.type) === xe.DYNAMIC ? false : !r || (t == null ? void 0 : t.code) || (t == null ? void 0 : t.type) === xe.CODE;
};
var _t = (e) => {
  var _a, _b;
  return ((_a = e.type) == null ? void 0 : _a.displayName) === "MDXCreateElement" && !!((_b = e.props) == null ? void 0 : _b.mdxType);
};
var De = (e) => {
  if (!_t(e))
    return e;
  let { mdxType: t, originalType: r, children: n, ...o } = e.props, s2 = [];
  return n && (s2 = (Array.isArray(n) ? n : [n]).map(De)), (0, import_react2.createElement)(r, o, ...s2);
};
var je = (e, t) => {
  var _a, _b;
  let r = c.getChannel(), n = Ut(t), o = "";
  Y(() => {
    n || r.emit(Er, (t || {}).id, o);
  });
  let s2 = e();
  if (n)
    return s2;
  let p = { ...Mt, ...(t == null ? void 0 : t.parameters.jsx) || {} }, c2 = ((_b = (_a = t == null ? void 0 : t.parameters.docs) == null ? void 0 : _a.source) == null ? void 0 : _b.excludeDecorators) ? t.originalStoryFn(t.args, t) : s2, i2 = De(c2), g = Vt(i2, p);
  return g && (o = Lt(g, p, t)), s2;
};
var ke = { docs: { inlineStories: true, extractArgTypes: Fe, extractComponentDescription: gr } };
var $t = [je];
var Bt = [dr];
var Jn = { framework: "react", ...ke };
export {
  Bt as argTypesEnhancers,
  $t as decorators,
  Jn as parameters,
  b2 as render,
  U as renderToDOM
};
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
/**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=@storybook_react_preview.js.map
