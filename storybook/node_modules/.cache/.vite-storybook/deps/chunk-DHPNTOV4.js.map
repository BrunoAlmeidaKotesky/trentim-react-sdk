{
  "version": 3,
  "sources": ["../../../markdown-to-jsx/index.tsx"],
  "sourcesContent": ["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. \uD83D\uDE4F\uD83C\uDFFC\n */\nimport * as React from 'react'\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    _inAnchor?: boolean\n    _inline?: boolean\n    _inTable?: boolean\n    _key?: React.Key\n    _list?: boolean\n    _simple?: boolean\n  }\n\n  export type ParserResult = {\n    [key: string]: any\n    type?: string\n  }\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult,\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    _match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    _order: Priority\n    _parse: MarkdownToJSX.Parser<ParserOutput>\n    _react?: (\n      node: ParserOutput,\n      output: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [key: string]: Rule\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.Props<any>,\n      ...children: React.ReactChild[]\n    ) => JSX.Element\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entites are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (source: string) => string\n  }>\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'className',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce((obj, x) => ((obj[x.toLowerCase()] = x), obj), { for: 'htmlFor' })\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              \u21B3 children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     \u2193                \u21B3 disabled: true\n *                     \u21B3 color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   \u21B3 someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceeded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z]+);/g\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s*(\\S+)\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_SEPARATOR_R = /^ *\\| */\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CELL_END_TRIM = / *$/\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\nconst TEXT_BOLD_R =\n  /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/\nconst TEXT_EMPHASIZED_R =\n  /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^0-9A-Z\\s])/gi\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst LIST_BULLET = '(?:[*+-]|\\\\d+\\\\.)'\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst LIST_ITEM_PREFIX = '( *)(' + LIST_BULLET + ') +'\nconst LIST_ITEM_PREFIX_R = new RegExp('^' + LIST_ITEM_PREFIX)\n\n// recognize an individual list item:\n//  * hi\n//    this is part of the same item\n//\n//    as is this, which is a new paragraph in the same item\n//\n//  * but this is not part of the same item\nconst LIST_ITEM_R = new RegExp(\n  '^' +\n    LIST_ITEM_PREFIX +\n    '[^\\\\n]*(?:\\\\n' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' )[^\\\\n]*)*(\\\\n|$)',\n  'gm'\n)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nconst LIST_R = new RegExp(\n  '^( *)(' +\n    LIST_BULLET +\n    ') ' +\n    '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' (?!' +\n    LIST_BULLET +\n    ' ))\\\\n*' +\n    // the \\\\s*$ here is so that we can parse the inside of nested\n    // lists, where our content might end before we receive two `\\n`s\n    '|\\\\s*\\\\n*$)'\n)\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\n\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst IMAGE_R = new RegExp(\n  '^!\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_R,\n  CODE_BLOCK_FENCED_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HTML_COMMENT_R,\n  LIST_ITEM_R,\n  LIST_R,\n  NP_TABLE_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str: string) {\n  return str\n    .replace(/[\u00C0\u00C1\u00C2\u00C3\u00C4\u00C5\u00E0\u00E1\u00E2\u00E3\u00E4\u00E5\u00E6\u00C6]/g, 'a')\n    .replace(/[\u00E7\u00C7]/g, 'c')\n    .replace(/[\u00F0\u00D0]/g, 'd')\n    .replace(/[\u00C8\u00C9\u00CA\u00CB\u00E9\u00E8\u00EA\u00EB]/g, 'e')\n    .replace(/[\u00CF\u00EF\u00CE\u00EE\u00CD\u00ED\u00CC\u00EC]/g, 'i')\n    .replace(/[\u00D1\u00F1]/g, 'n')\n    .replace(/[\u00F8\u00D8\u0153\u0152\u00D5\u00F5\u00D4\u00F4\u00D3\u00F3\u00D2\u00F2]/g, 'o')\n    .replace(/[\u00DC\u00FC\u00DB\u00FB\u00DA\u00FA\u00D9\u00F9]/g, 'u')\n    .replace(/[\u0178\u00FF\u00DD\u00FD]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const prevInTable = state._inTable\n  state._inTable = true\n  const tableRow = parse(source.trim(), state)\n  state._inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === 'text' &&\n        (tableRow[i + 1] == null || tableRow[i + 1].type === 'tableSeparator')\n      ) {\n        node.content = node.content.replace(TABLE_CELL_END_TRIM, '')\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  state._inline = true\n  const header = parseTableRow(capture[1], parse, state)\n  const align = parseTableAlign(capture[2])\n  const cells = parseTableCells(capture[3], parse, state)\n  state._inline = false\n\n  return {\n    align: align,\n    cells: cells,\n    header: header,\n    type: 'table',\n  }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  key: JSX.IntrinsicAttributes,\n  value: string\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type]._order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA]._order\n    let orderB = rules[typeB]._order\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule._match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule._parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state._inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(\n  source: string,\n  state: MarkdownToJSX.State,\n  prevCapturedString?: string\n) {\n  if (state._inline || state._simple) {\n    return null\n  }\n\n  if (prevCapturedString && !prevCapturedString.endsWith('\\n')) {\n    // don't match continuation of a line\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n    match += line + '\\n'\n    return line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state._key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state._key = i\n\n        const nodeOut = nestedReactOutput(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state._key = oldKey\n\n      return result\n    }\n\n    return outputFunc(ast, nestedReactOutput, state)\n  }\n}\n\nfunction sanitizeUrl(url: string): string | null {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = true\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = false\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  content,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  state._inline = false\n  return parse(content + '\\n\\n', state)\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<ReturnType<typeof parseInline>> =\n  (capture, parse, state: MarkdownToJSX.State) => {\n    return {\n      content: parseInline(parse, capture[1], state),\n    }\n  }\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction ruleOutput(rules: MarkdownToJSX.Rules) {\n  return function nestedRuleOutput(\n    ast: MarkdownToJSX.ParserResult,\n    outputFunc: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    return rules[ast.type]._react(ast, outputFunc, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nenum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\nexport function compiler(\n  markdown: string,\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const createElementFn = options.createElement || React.createElement\n\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    let _inline = false\n\n    if (options.forceInline) {\n      _inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      _inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        _inline\n          ? input\n          : `${input.trimEnd().replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          _inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (_inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(str: string): React.Props<any> {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n\n    return attributes\n      ? attributes.reduce(function (map, raw, index) {\n          const delimiterIdx = raw.indexOf('=')\n\n          if (delimiterIdx !== -1) {\n            const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n            const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n            const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n            const normalizedValue = (map[mappedKey] =\n              attributeValueToJSXPropValue(key, value))\n\n            if (\n              typeof normalizedValue === 'string' &&\n              (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n                HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n            ) {\n              map[mappedKey] = React.cloneElement(\n                compile(normalizedValue.trim()),\n                { key: index }\n              )\n            }\n          } else if (raw !== 'style') {\n            map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n          }\n\n          return map\n        }, {})\n      : undefined\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules: MarkdownToJSX.Rules = {\n    blockQuote: {\n      _match: blockRegex(BLOCKQUOTE_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <blockquote key={state._key}>\n            {output(node.content, state)}\n          </blockquote>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: MarkdownToJSX.ParserResult }>,\n\n    breakLine: {\n      _match: anyScopeRegex(BREAK_LINE_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <br key={state._key} />\n      },\n    },\n\n    breakThematic: {\n      _match: blockRegex(BREAK_THEMATIC_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <hr key={state._key} />\n      },\n    },\n\n    codeBlock: {\n      _match: blockRegex(CODE_BLOCK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n          lang: undefined,\n        }\n      },\n\n      _react(node, output, state) {\n        return (\n          <pre key={state._key}>\n            <code className={node.lang ? `lang-${node.lang}` : ''}>\n              {node.content}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; lang?: string }>,\n\n    codeFenced: {\n      _match: blockRegex(CODE_BLOCK_FENCED_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[3],\n          lang: capture[2] || undefined,\n          type: 'codeBlock',\n        }\n      },\n    },\n\n    codeInline: {\n      _match: simpleInlineRegex(CODE_INLINE_R),\n      _order: Priority.LOW,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return <code key={state._key}>{node.content}</code>\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      _match: blockRegex(FOOTNOTE_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    footnoteReference: {\n      _match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse*/) {\n        return {\n          content: capture[1],\n          target: `#${options.slugify(capture[1])}`,\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a key={state._key} href={sanitizeUrl(node.target)}>\n            <sup key={state._key}>{node.content}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ content: string; target: string }>,\n\n    gfmTask: {\n      _match: inlineRegex(GFM_TASK_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state._key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    heading: {\n      _match: blockRegex(HEADING_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2]),\n          level: capture[1].length,\n        }\n      },\n      _react(node, output, state) {\n        node.tag = `h${node.level}` as MarkdownToJSX.HTMLTags\n        return (\n          <node.tag id={node.id} key={state._key}>\n            {output(node.content, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      id: string\n      level: number\n      tag: MarkdownToJSX.HTMLTags\n    }>,\n\n    headingSetext: {\n      _match: blockRegex(HEADING_SETEXT_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        }\n      },\n    },\n\n    htmlComment: {\n      _match: anyScopeRegex(HTML_COMMENT_R),\n      _order: Priority.HIGH,\n      _parse() {\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    image: {\n      _match: simpleInlineRegex(IMAGE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitizeUrl(node.target)}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; target: string; title?: string }>,\n\n    link: {\n      _match: inlineRegex(LINK_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          content: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a\n            key={state._key}\n            href={sanitizeUrl(node.target)}\n            title={node.title}\n          >\n            {output(node.content, state)}\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      target: string\n      title?: string\n    }>,\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          type: 'link',\n        }\n      },\n    },\n\n    linkBareUrlDetector: {\n      _match: (source, state) => {\n        if (state._inAnchor) {\n          return null\n        }\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: 'link',\n        }\n      },\n    },\n\n    linkMailtoDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          content: [\n            {\n              content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          target: target,\n          type: 'link',\n        }\n      },\n    },\n\n    list: {\n      _match(source, state, prevCapture) {\n        // We only want to break into a list if we are at the start of a\n        // line. This is to avoid parsing \"hi * there\" with \"* there\"\n        // becoming a part of a list.\n        // You might wonder, \"but that's inline, so of course it wouldn't\n        // start a list?\". You would be correct! Except that some of our\n        // lists can be inline, because they might be inside another list,\n        // in which case we can parse with inline scope, but need to allow\n        // nested lists inside this inline scope.\n        const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n        const isListBlock = state._list || !state._inline\n\n        if (isStartOfLine && isListBlock) {\n          source = isStartOfLine[1] + source\n\n          return LIST_R.exec(source)\n        } else {\n          return null\n        }\n      },\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const bullet = capture[2]\n        const ordered = bullet.length > 1\n        const start = ordered ? +bullet : undefined\n        const items = capture[0]\n          // recognize the end of a paragraph block inside a list item:\n          // two or more newlines at end end of the item\n          .replace(BLOCK_END_R, '\\n')\n          .match(LIST_ITEM_R)\n\n        let lastItemWasAParagraph = false\n        const itemContent = items.map(function (item, i) {\n          // We need to see how far indented the item is:\n          const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n          // And then we construct a regex to \"unindent\" the subsequent\n          // lines of the items by that amount:\n          const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n          // Before processing the item, we need a couple things\n          const content = item\n            // remove indents on trailing lines:\n            .replace(spaceRegex, '')\n            // remove the bullet:\n            .replace(LIST_ITEM_PREFIX_R, '')\n\n          // Handling \"loose\" lists, like:\n          //\n          //  * this is wrapped in a paragraph\n          //\n          //  * as is this\n          //\n          //  * as is this\n          const isLastItem = i === items.length - 1\n          const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n          // Any element in a list is a block if it contains multiple\n          // newlines. The last element in the list can also be a block\n          // if the previous item in the list was a block (this is\n          // because non-last items in the list can end with \\n\\n, but\n          // the last item can't, so we just \"inherit\" this property\n          // from our previous element).\n          const thisItemIsAParagraph =\n            containsBlocks || (isLastItem && lastItemWasAParagraph)\n          lastItemWasAParagraph = thisItemIsAParagraph\n\n          // backup our state for restoration afterwards. We're going to\n          // want to set state._list to true, and state._inline depending\n          // on our list's looseness.\n          const oldStateInline = state._inline\n          const oldStateList = state._list\n          state._list = true\n\n          // Parse inline if we're in a tight list, or block if we're in\n          // a loose list.\n          let adjustedContent\n          if (thisItemIsAParagraph) {\n            state._inline = false\n            adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n          } else {\n            state._inline = true\n            adjustedContent = content.replace(LIST_ITEM_END_R, '')\n          }\n\n          const result = parse(adjustedContent, state)\n\n          // Restore our state before returning\n          state._inline = oldStateInline\n          state._list = oldStateList\n\n          return result\n        })\n\n        return {\n          items: itemContent,\n          ordered: ordered,\n          start: start,\n        }\n      },\n      _react(node, output, state) {\n        const Tag = node.ordered ? 'ol' : 'ul'\n\n        return (\n          <Tag key={state._key} start={node.start}>\n            {node.items.map(function generateListItem(item, i) {\n              return <li key={i}>{output(item, state)}</li>\n            })}\n          </Tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      items: MarkdownToJSX.ParserResult[]\n      ordered: boolean\n      start?: number\n    }>,\n\n    newlineCoalescer: {\n      _match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      _order: Priority.LOW,\n      _parse: captureNothing,\n      _react(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    paragraph: {\n      _match: matchParagraph,\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <p key={state._key}>{output(node.content, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    ref: {\n      _match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      _order: Priority.MAX,\n      _parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    refImage: {\n      _match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      _order: Priority.MAX,\n      _parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node.alt}\n            src={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    refLink: {\n      _match: inlineRegex(REFERENCE_LINK_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          content: parse(capture[1], state),\n          fallbackContent: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state._key}\n            href={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          >\n            {output(node.content, state)}\n          </a>\n        ) : (\n          <span key={state._key}>{output(node.fallbackContent, state)}</span>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      content: MarkdownToJSX.ParserResult\n      fallbackContent: MarkdownToJSX.ParserResult\n      ref: string\n    }>,\n\n    table: {\n      _match: blockRegex(NP_TABLE_R),\n      _order: Priority.HIGH,\n      _parse: parseTable,\n      _react(node, output, state) {\n        return (\n          <table key={state._key}>\n            <thead>\n              <tr>\n                {node.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseTable>>,\n\n    tableSeparator: {\n      _match: function (source, state) {\n        if (!state._inTable) {\n          return null\n        }\n        return TABLE_SEPARATOR_R.exec(source)\n      },\n      _order: Priority.HIGH,\n      _parse: function () {\n        return { type: 'tableSeparator' }\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      _react() {\n        return ' | '\n      },\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      _match: anyScopeRegex(TEXT_PLAIN_R),\n      _order: Priority.MIN,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      _react(node /*, output, state*/) {\n        return node.content\n      },\n    } as MarkdownToJSX.Rule<{ content: string }>,\n\n    textBolded: {\n      _match: simpleInlineRegex(TEXT_BOLD_R),\n      _order: Priority.MED,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <strong key={state._key}>{output(node.content, state)}</strong>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEmphasized: {\n      _match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <em key={state._key}>{output(node.content, state)}</em>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      _match: simpleInlineRegex(TEXT_ESCAPED_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          content: capture[1],\n          type: 'text',\n        }\n      },\n    },\n\n    textStrikethroughed: {\n      _match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <del key={state._key}>{output(node.content, state)}</del>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //     let { match, parse } = rules[key];\n\n  //     rules[key]._match = (...args) => {\n  //         const start = performance.now();\n  //         const result = match(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(\n  //                 `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${\n  //                     args[0]\n  //                 }`\n  //             );\n\n  //         return result;\n  //     };\n\n  //     rules[key]._parse = (...args) => {\n  //         const start = performance.now();\n  //         const result = parse(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`);\n\n  //         console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0]);\n\n  //         return result;\n  //     };\n  // });\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        state._inAnchor = state._inAnchor || tagName === 'a'\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        const content = noInnerParse\n          ? capture[3]\n          : parseFunc(parse, trimmed, state)\n\n        state._inAnchor = false\n\n        return {\n          attrs: attrStringToMap(capture[2]),\n          content,\n\n          noInnerParse,\n\n          tag: noInnerParse ? tagName : capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          // @ts-ignore\n          <node.tag key={state._key} {...node.attrs}>\n            {node.noInnerParse\n              ? (node.content as string)\n              : output(node.content as MarkdownToJSX.ParserResult, state)}\n          </node.tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      content: string | ReturnType<MarkdownToJSX.NestedParser>\n      noInnerParse: Boolean\n      tag: string\n    }>\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          attrs: attrStringToMap(capture[2] || ''),\n          tag: capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return <node.tag {...node.attrs} key={state._key} />\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      tag: string\n    }>\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(ruleOutput(rules))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div id={options.slugify(def.identifier)} key={def.identifier}>\n                {def.identifier}\n                {emitter(parser(def.footnote, { _inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children, options, ...props }) => {\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.Props<any>\n  )\n}\n\nexport default Markdown\n"],
  "mappings": "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",
  "names": ["ATTRIBUTE_TO_JSX_PROP_MAP", "reduce", "obj", "x", "toLowerCase", "for", "namedCodesToUnicode", "amp", "apos", "gt", "lt", "nbsp", "quot", "DO_NOT_PROCESS_HTML_ELEMENTS", "ATTR_EXTRACTOR_R", "AUTOLINK_MAILTO_CHECK_R", "BLOCK_END_R", "BLOCKQUOTE_R", "BLOCKQUOTE_TRIM_LEFT_MULTILINE_R", "BREAK_LINE_R", "BREAK_THEMATIC_R", "CODE_BLOCK_FENCED_R", "CODE_BLOCK_R", "CODE_INLINE_R", "CONSECUTIVE_NEWLINE_R", "CR_NEWLINE_R", "FOOTNOTE_R", "FOOTNOTE_REFERENCE_R", "FORMFEED_R", "GFM_TASK_R", "HEADING_R", "HEADING_SETEXT_R", "HTML_BLOCK_ELEMENT_R", "HTML_CHAR_CODE_R", "HTML_COMMENT_R", "HTML_CUSTOM_ATTR_R", "HTML_SELF_CLOSING_ELEMENT_R", "INTERPOLATION_R", "LINK_AUTOLINK_BARE_URL_R", "LINK_AUTOLINK_MAILTO_R", "LINK_AUTOLINK_R", "LIST_ITEM_END_R", "LIST_LOOKBEHIND_R", "CAPTURE_LETTER_AFTER_HYPHEN", "NP_TABLE_R", "REFERENCE_IMAGE_OR_LINK", "REFERENCE_IMAGE_R", "REFERENCE_LINK_R", "SQUARE_BRACKETS_R", "SHOULD_RENDER_AS_BLOCK_R", "TAB_R", "TABLE_SEPARATOR_R", "TABLE_TRIM_PIPES", "TABLE_CELL_END_TRIM", "TABLE_CENTER_ALIGN", "TABLE_LEFT_ALIGN", "TABLE_RIGHT_ALIGN", "TEXT_BOLD_R", "TEXT_EMPHASIZED_R", "TEXT_STRIKETHROUGHED_R", "TEXT_ESCAPED_R", "TEXT_PLAIN_R", "TRIM_STARTING_NEWLINES", "HTML_LEFT_TRIM_AMOUNT_R", "UNESCAPE_URL_R", "LIST_ITEM_PREFIX_R", "RegExp", "LIST_ITEM_R", "LIST_R", "LINK_INSIDE", "LINK_R", "IMAGE_R", "NON_PARAGRAPH_BLOCK_SYNTAXES", "BLOCK_SYNTAXES", "slugify", "str", "replace", "parseTableAlignCapture", "alignCapture", "test", "parseTableRow", "source", "parse", "state", "prevInTable", "_inTable", "tableRow", "trim", "cells", "forEach", "node", "i", "type", "length", "push", "content", "parseTable", "capture", "_inline", "header", "align", "split", "map", "rowText", "getTableStyle", "colIndex", "textAlign", "inlineRegex", "regex", "exec", "simpleInlineRegex", "_simple", "blockRegex", "anyScopeRegex", "matchParagraph", "prevCapturedString", "endsWith", "match", "every", "line", "some", "captured", "trimEnd", "sanitizeUrl", "url", "decodeURIComponent", "e", "unescapeUrl", "rawUrlString", "parseInline", "isCurrentlyInline", "isCurrentlySimple", "result", "parseSimpleInline", "parseBlock", "parseCaptureInline", "captureNothing", "renderNothing", "cx", "args", "filter", "Boolean", "join", "get", "src", "path", "fb", "ptr", "frags", "shift", "Priority", "compiler", "markdown", "options", "overrides", "createElementFn", "createElement", "h", "tag", "props", "children", "overrideProps", "override", "className", "undefined", "compile", "input", "forceInline", "forceBlock", "arr", "emitter", "parser", "pop", "wrapper", "jsx", "forceWrapper", "key", "attrStringToMap", "attributes", "raw", "index", "delimiterIdx", "indexOf", "_", "letter", "toUpperCase", "slice", "value", "first", "mappedKey", "normalizedValue", "styles", "kvPair", "substr", "cloneElement", "footnotes", "refs", "rules", "blockQuote", "_match", "_order", "HIGH", "_parse", "_react", "output", "_key", "breakLine", "__", "breakThematic", "codeBlock", "MAX", "lang", "codeFenced", "codeInline", "LOW", "footnote", "identifier", "footnoteReference", "target", "href", "gfmTask", "completed", "checked", "readOnly", "heading", "id", "level", "headingSetext", "htmlComment", "image", "alt", "title", "link", "linkAngleBraceStyleDetector", "linkBareUrlDetector", "_inAnchor", "linkMailtoDetector", "address", "list", "prevCapture", "isStartOfLine", "_list", "bullet", "ordered", "start", "items", "lastItemWasAParagraph", "item", "space", "spaceRegex", "isLastItem", "thisItemIsAParagraph", "oldStateInline", "oldStateList", "adjustedContent", "newlineCoalescer", "paragraph", "ref", "refImage", "refLink", "fallbackContent", "table", "style", "row", "c", "tableSeparator", "text", "MIN", "full", "inner", "textBolded", "MED", "textEmphasized", "textEscaped", "textStrikethroughed", "disableParsingRawHTML", "htmlBlock", "whitespace", "trimmer", "trimmed", "parseFunc", "r", "tagName", "noInnerParse", "attrs", "htmlSelfClosing", "ruleList", "Object", "keys", "nestedParse", "ruleType", "rule", "currCaptureString", "substring", "parsed", "sort", "typeA", "typeB", "orderA", "orderB", "outputFunc", "ast", "nestedReactOutput", "Array", "isArray", "oldKey", "lastWasString", "nodeOut", "isString", "def", "_ref"]
}
