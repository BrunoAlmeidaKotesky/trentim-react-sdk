import * as _storybook_types from '@storybook/types';
import { AnyFramework, Store_NormalizedProjectAnnotations, StoryId, Addon_IndexEntry, ComponentId, Path, Store_ModuleExports, DecoratorFunction, Parameters, LoaderFunction, Args, ArgTypes, ArgsEnhancer, ArgTypesEnhancer, StepRunner, StoryFn, Store_ModuleImportFn, Globals, GlobalTypes, Addon_StoryApi } from '@storybook/types';
import { StoryStore } from '@storybook/store';
export * from '@storybook/store';
import * as qs from 'qs';

declare class StoryStoreFacade<TFramework extends AnyFramework> {
    projectAnnotations: Store_NormalizedProjectAnnotations<TFramework>;
    entries: Record<StoryId, Addon_IndexEntry & {
        componentId?: ComponentId;
    }>;
    csfExports: Record<Path, Store_ModuleExports>;
    constructor();
    importFn(path: Path): Promise<Store_ModuleExports>;
    getStoryIndex(store: StoryStore<TFramework>): {
        v: number;
        entries: Record<string, Addon_IndexEntry>;
    };
    clearFilenameExports(fileName: Path): void;
    addStoriesFromExports(fileName: Path, fileExports: Store_ModuleExports): void;
}

declare const addDecorator: (decorator: DecoratorFunction<AnyFramework>) => void;
declare const addParameters: (parameters: Parameters) => void;
declare const addLoader: (loader: LoaderFunction<AnyFramework>) => void;
declare const addArgs: (args: Args) => void;
declare const addArgTypes: (argTypes: ArgTypes) => void;
declare const addArgsEnhancer: (enhancer: ArgsEnhancer<AnyFramework>) => void;
declare const addArgTypesEnhancer: (enhancer: ArgTypesEnhancer<AnyFramework>) => void;
declare const addStepRunner: (stepRunner: StepRunner) => void;
declare const setGlobalRender: (render: StoryFn<AnyFramework>) => void;
declare class ClientApi<TFramework extends AnyFramework> {
    facade: StoryStoreFacade<TFramework>;
    storyStore?: StoryStore<TFramework>;
    private addons;
    onImportFnChanged?: ({ importFn }: {
        importFn: Store_ModuleImportFn;
    }) => void;
    private lastFileName;
    constructor({ storyStore }?: {
        storyStore?: StoryStore<TFramework>;
    });
    importFn(path: Path): Promise<Store_ModuleExports>;
    getStoryIndex(): {
        v: number;
        entries: Record<string, _storybook_types.Addon_IndexEntry>;
    };
    addDecorator: (decorator: DecoratorFunction<TFramework>) => void;
    addParameters: ({ globals, globalTypes, ...parameters }: Parameters & {
        globals?: Globals;
        globalTypes?: GlobalTypes;
    }) => void;
    addStepRunner: (stepRunner: StepRunner) => void;
    addLoader: (loader: LoaderFunction<TFramework>) => void;
    addArgs: (args: Args) => void;
    addArgTypes: (argTypes: ArgTypes) => void;
    addArgsEnhancer: (enhancer: ArgsEnhancer<TFramework>) => void;
    addArgTypesEnhancer: (enhancer: ArgTypesEnhancer<TFramework>) => void;
    _addedExports: Record<string, Store_ModuleExports>;
    _loadAddedExports(): void;
    storiesOf: (kind: string, m?: NodeModule) => Addon_StoryApi<TFramework['storyResult']>;
    raw: () => _storybook_types.Store_BoundStory<TFramework>[];
    get _storyStore(): StoryStore<TFramework>;
}

declare const getQueryParams: () => qs.ParsedQs;
declare const getQueryParam: (key: string) => string | string[] | qs.ParsedQs | qs.ParsedQs[];

export { ClientApi, addArgTypes, addArgTypesEnhancer, addArgs, addArgsEnhancer, addDecorator, addLoader, addParameters, addStepRunner, getQueryParam, getQueryParams, setGlobalRender };
