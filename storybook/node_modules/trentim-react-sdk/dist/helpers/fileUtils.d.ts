import { ConversionOptions } from './ConverterOptions';
import type { IBlobStringWritter as IBlobStringWriter, IFileInfo } from '../models/interfaces/IFileInfo';
/**
* Take an stored object url and convert it back to a File object.
*
* @param url - The first input number
* @param fileInfo - The second input number
* @param {RequestInit=} fetchOptions - An optional fetching options about the url request, it uses the same `{RequestInit}` interface from fetch api.
* @returns A promise containing the file
*
*@example
*```ts
* const newFile = await urlToFile("blob:https://tenant.com/bd3df1f7-38c5-44db-9a97-aa956072ef02", {
*   fileName: "bird.png",
*   fileMime: "image/png",
*   lastModified: new Date().getTime()
* });
* ```
* */
export declare function urlToFile(url: string, fileInfo: IFileInfo, fetchOptions?: RequestInit): Promise<File>;
/**
 * Takes any `Blob` object or inherited objects from this interface and convert it to a base64 string.
 * @param blob - Any Blob object, such as `File` and other inherited objects from this interface.
 * @returns A promise of the base64 string.
 */
export declare const blobToBase64: (blob: Blob, config?: IBlobStringWriter) => Promise<string>;
/**
 * Convert's a base 64 string to some of the possible return values from `ConversionOptions` class.
 * @returns
 * ```ts
 * new ConversionOptions()
 * ```
 * */
export declare function convertBase64To(base64: string, fileName?: string, type?: string): ConversionOptions;
