function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import prompts from 'prompts';
import { loadAllPresets, cache } from '@storybook/core-common';
import { telemetry } from '@storybook/telemetry';

var promptCrashReports = async function () {
  if (process.env.CI && process.env.NODE_ENV !== 'test') {
    return undefined;
  }

  var _await$prompts = await prompts({
    type: 'confirm',
    name: 'enableCrashReports',
    message: `Would you like to send crash reports to Storybook?`,
    initial: true
  }),
      enableCrashReports = _await$prompts.enableCrashReports;

  await cache.set('enableCrashReports', enableCrashReports);
  return enableCrashReports;
};

async function shouldSendError({
  cliOptions: cliOptions,
  presetOptions: presetOptions
}) {
  if (cliOptions !== null && cliOptions !== void 0 && cliOptions.disableTelemetry) return false; // If we are running init or similar, we just have to go with true here

  if (!presetOptions) return true; // should we load the preset?

  var presets = await loadAllPresets(_objectSpread({
    corePresets: [require.resolve('./presets/common-preset')],
    overridePresets: []
  }, presetOptions)); // If the user has chosen to enable/disable crash reports in main.js
  // or disabled telemetry, we can return that

  var core = await presets.apply('core');
  if ((core === null || core === void 0 ? void 0 : core.enableCrashReports) !== undefined) return core.enableCrashReports;
  if (core !== null && core !== void 0 && core.disableTelemetry) return false; // Deal with typo, remove in future version (7.1?)

  var valueFromCache = (await cache.get('enableCrashReports')) ?? (await cache.get('enableCrashreports'));
  if (valueFromCache !== undefined) return valueFromCache;
  var valueFromPrompt = await promptCrashReports();
  if (valueFromPrompt !== undefined) return valueFromPrompt;
  return true;
}

export async function withTelemetry(eventType, options, run) {
  telemetry('boot', {
    eventType: eventType
  }, {
    stripMetadata: true
  });

  try {
    await run();
  } catch (error) {
    try {
      if (await shouldSendError(options)) {
        var _options$cliOptions, _options$presetOption;

        await telemetry('error', {
          eventType: eventType,
          error: error
        }, {
          immediate: true,
          configDir: ((_options$cliOptions = options.cliOptions) === null || _options$cliOptions === void 0 ? void 0 : _options$cliOptions.configDir) || ((_options$presetOption = options.presetOptions) === null || _options$presetOption === void 0 ? void 0 : _options$presetOption.configDir),
          enableCrashReports: true
        });
      }
    } catch (err) {// if this throws an error, we just move on
    }

    throw error;
  }
}