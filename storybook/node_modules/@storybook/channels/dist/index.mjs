var a=()=>Math.random().toString(16).slice(2),r=class{constructor({transport:e,async:t=!1}={}){this.sender=a();this.events={};this.data={};this.isAsync=t,e&&(this.transport=e,this.transport.setHandler(n=>this.handleEvent(n)))}get hasTransport(){return!!this.transport}addListener(e,t){this.events[e]=this.events[e]||[],this.events[e].push(t)}emit(e,...t){let n={type:e,args:t,from:this.sender},s={};t.length>=1&&t[0]&&t[0].options&&(s=t[0].options);let i=()=>{this.transport&&this.transport.send(n,s),this.handleEvent(n)};this.isAsync?setImmediate(i):i()}last(e){return this.data[e]}eventNames(){return Object.keys(this.events)}listenerCount(e){let t=this.listeners(e);return t?t.length:0}listeners(e){return this.events[e]||void 0}once(e,t){let n=this.onceListener(e,t);this.addListener(e,n)}removeAllListeners(e){e?this.events[e]&&delete this.events[e]:this.events={}}removeListener(e,t){let n=this.listeners(e);n&&(this.events[e]=n.filter(s=>s!==t))}on(e,t){this.addListener(e,t)}off(e,t){this.removeListener(e,t)}handleEvent(e){let t=this.listeners(e.type);t&&t.length&&t.forEach(n=>{n.apply(e,e.args)}),this.data[e.type]=e.args}onceListener(e,t){let n=(...s)=>(this.removeListener(e,n),t(...s));return n}},l=r;export{r as Channel,l as default};
