import {
  isJSON,
  parse,
  stringify
} from "./chunk-3R5MGDK7.js";
import {
  r
} from "./chunk-EF2YLWYO.js";
import {
  i
} from "./chunk-3QDDUDC7.js";
import {
  require_window
} from "./chunk-Z3ID2O7F.js";
import {
  __toESM
} from "./chunk-S5KM4IGW.js";

// node_modules/@storybook/channel-websocket/dist/esm/index.js
var import_global = __toESM(require_window());
var {
  WebSocket
} = import_global.default;
var WebsocketTransport = class {
  constructor({
    url,
    onError
  }) {
    this.socket = void 0;
    this.handler = void 0;
    this.buffer = [];
    this.isReady = false;
    this.connect(url, onError);
  }
  setHandler(handler) {
    this.handler = handler;
  }
  send(event) {
    if (!this.isReady) {
      this.sendLater(event);
    } else {
      this.sendNow(event);
    }
  }
  sendLater(event) {
    this.buffer.push(event);
  }
  sendNow(event) {
    const data = stringify(event, {
      maxDepth: 15,
      allowFunction: true
    });
    this.socket.send(data);
  }
  flush() {
    const {
      buffer
    } = this;
    this.buffer = [];
    buffer.forEach((event) => this.send(event));
  }
  connect(url, onError) {
    this.socket = new WebSocket(url);
    this.socket.onopen = () => {
      this.isReady = true;
      this.flush();
    };
    this.socket.onmessage = ({
      data
    }) => {
      const event = typeof data === "string" && isJSON(data) ? parse(data) : data;
      this.handler(event);
    };
    this.socket.onerror = (e) => {
      if (onError) {
        onError(e);
      }
    };
  }
};
function createChannel({
  url,
  async = false,
  onError = (err) => i.warn(err)
}) {
  const transport = new WebsocketTransport({
    url,
    onError
  });
  return new r({
    transport,
    async
  });
}
var esm_default = createChannel;

export {
  WebsocketTransport,
  createChannel,
  esm_default
};
//# sourceMappingURL=chunk-NBNWIVYN.js.map
